<?php

/**
 * Implements hook_menu().
 */ 
function zmt_menu() {
  $items = array();

  $items['admin/config/system/zmt'] = array(
    'title' => t('Zimbra multi-tenancy settings'),
    'description' => 'Zimbra multi-tenancy settings.',
    'page callback' => 'zmt_setting_form_page',
    'access arguments' => array('administer zimbra'),
    'file' => 'zmt.admin.inc',
  );

  $items['zmt/server/pull'] = array(
    'title' => 'Pull data',
    'page callback' => 'zmt_server_pull_data_page',
    'access callback' => 'zmt_server_add_access',
    'type' => MENU_LOCAL_ACTION,
    'file' => 'zmt.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_zmt_domain_presave().
 */
function zmt_ui_zmt_domain_presave($domain) {
  module_load_include('inc', 'zmt', 'includes/zmt.zimbra');
  $api = zimbra_admin_api_by_server($domain->server_id);
  $zimbra_domain = zimbra_get_domain($api, $domain->name);
  if (!$zimbra_domain) {
    $zimbra_domain = zimbra_create_domain($api, $domain->name, $attrs);
    $domain->zimbra_id = isset($zimbra_domain->id) ? $zimbra_domain->id : '';
  }
}

/**
 * Implements hook_zmt_domain_delete().
 */
function zmt_ui_zmt_domain_delete($domain) {
  if ((int) $domain->delete_domain > 0 && !empty($domain->zimbra_id)) {
    module_load_include('inc', 'zmt', 'includes/zmt.zimbra');
    $api = zimbra_admin_api_by_server($domain->server_id);
    zimbra_delete_domain($api, $domain->zimbra_id);
  }
}

/**
 * Implements hook_zmt_account_presave().
 */
function zmt_ui_zmt_account_presave($account) {
  module_load_include('inc', 'zmt', 'includes/zmt.zimbra');
  if (!empty($account->id)) {
    $domain_name = $account->domain;
    $server_id = $account->server_id;
    $cos_zimbra_id = $account->cos_zimbra_id;
  }
  else {
    $domain = zmt_domain_load($account->domain_id);
    $cos = zmt_cos_load($account->cos_id);
  
    $domain_name = !empty($domain->name) ? $domain->name : '';
    $server_id = !empty($domain->server_id) ? (int) $domain->server_id : 0;
    $cos_zimbra_id = !empty($cos->zimbra_id) ? $cos->zimbra_id : '';
  }
  $api = zimbra_admin_api_by_server($server_id);

  $attrs = array(
    'displayName' => $account->full_name,
    'sn' => $account->full_name,
    'zimbraAccountStatus' => $account->status,
    'title' => $account->title,
    'telephoneNumber' => $account->telephone,
    'company' => $account->company,
    'mobile' => $account->mobile,
  );
  if (!empty($cos_zimbra_id)) {
    $attrs['zimbraCOSId'] = $cos_zimbra_id;
  }

  $mail_address = $account->name . '@' . $domain_name;
  if (!empty($account->id)) {
    $zimbra_account = zimbra_get_account($api, $mail_address);
    if (!$zimbra_account) {
      $zimbra_account = zimbra_create_account($api, $mail_address, $account->password, $attrs);
    }
    $account->zimbra_id = isset($zimbra_account->id) ? $zimbra_account->id : '';
  }
  else {
    $zimbra_id = $account->zimbra_id;
    $zimbra_account = zimbra_get_account($api, $mail_address);
    if (empty($zimbra_id)) {
      if (!$zimbra_account) {
        $zimbra_account = zimbra_create_account($api, $mail_address, $account->password, $attrs);
      }
      $account->zimbra_id = isset($zimbra_account->id) ? $zimbra_account->id : '';
    }
    else {
      zimbra_modify_account($api, $zimbra_id, $attrs);

      $old_account = zmt_account_load($account->id);
      if ($old_account) {
        $old_address = $old_account->name . '@' . $domain_name;
        if ($old_address !== $mail_address && !$zimbra_account) {
          zimbra_rename_account($api, $zimbra_id, $mail_address);
        }
      }
    }

    // Change account password
    if (!empty($account->password)) {
      $result = zimbra_set_password($api, $zimbra_id, $account->password);
      if (isset($result->message)) {
        $message = isset($result->message[0]->_content) ? $result->message[0]->_content : '';
        drupal_set_message($message);
      }
    }
  }
}

/**
 * Implements hook_zmt_account_delete().
 */
function zmt_ui_zmt_account_delete($account) {
  if ((int) $account->delete_account > 0 && !empty($account->zimbra_id)) {
    module_load_include('inc', 'zmt', 'includes/zmt.zimbra');
    $api = zimbra_admin_api_by_server($account->server_id);
    zimbra_delete_account($api, $account->zimbra_id);
  }
}

/**
 * Implements hook_zmt_alias_presave().
 */
function zmt_ui_zmt_alias_presave($alias) {
  module_load_include('inc', 'zmt', 'includes/zmt.zimbra');
  if (!empty($alias->id)) {
    $domain_name = $alias->domain;
    $server_id = $alias->server_id;
    $account_zimbra_id = $alias->account_zimbra_id;
  }
  else {
    $account = zim_account_load($alias->account_id);

    $domain_name = !empty($account->domain) ? $account->domain : '';
    $server_id = !empty($account->server_id) ? (int) $account->server_id : 0;
    $account_zimbra_id = !empty($account->zimbra_id) ? $account->zimbra_id : '';
  }

  if (!empty($account_zimbra_id)) {
    $api = zimbra_admin_api_by_server($server_id);

    $alias_address = $alias->name . '@' . $domain_name;
    if (!empty($alias->id)) {
      zimbra_add_account_alias($api, $account_zimbra_id, $alias_address);
    }
    else {
      $old_alias = zmt_alias_load($alias->id);
      $old_alias_address = $old_alias->name . '@' . $domain_name;
      if ($account_zimbra_id != $alias->zimbra_target_id || $old_alias_address != $alias_address) {
        zimbra_remove_account_alias($api, $old_alias_address, $alias->zimbra_target_id);
        zimbra_add_account_alias($api, $account_zimbra_id, $alias_address);
      }
    }
    $alias->zimbra_target_id = $account_zimbra_id;
  }
}

/**
 * Implements hook_zmt_alias_delete().
 */
function zmt_ui_zmt_alias_delete($alias) {
  if ((int) $alias->delete_alias > 0 && !empty($alias->zimbra_target_id)) {
    module_load_include('inc', 'zmt', 'includes/zmt.zimbra');
    $api = zimbra_admin_api_by_server($alias->server_id);
    zimbra_remove_account_alias($api, $alias->name . '@' . $alias->domain, $alias->zimbra_target_id);
  }
}

/**
 * Implements hook_zmt_group_presave().
 */
function zmt_ui_zmt_group_presave($group) {
  module_load_include('inc', 'zmt', 'includes/zmt.zimbra');
  if (!empty($group->id)) {
    $domain_name = $group->domain;
    $server_id = $group->server_id;
  }
  else {
    $domain  = zmt_domain_load($group->domain_id);
    $domain_name = !empty($domain->name) ? $domain->name : '';
    $server_id = !empty($domain->server_id) ? (int) $domain->server_id : 0;
  }

  $api = zimbra_admin_api_by_server($server_id);

  $mail_address = $group->name . '@' . $domain_name;
  $zimbra_dl = zimbra_get_dl($api, $mail_address);
  if (!$zimbra_dl) {
    $zimbra_dl = zimbra_create_dl($api, $mail_address, array(
      'displayName' => $group->full_name,
      'description' => $group->full_name,
    ));
  }
  else {
    zimbra_modify_dl($api, $zimbra_dl->id, array(
      'displayName' => $group->full_name,
      'description' => $group->full_name,
    ));
  }
  $group->zimbra_id = isset($zimbra_dl->id) ? $zimbra_dl->id : '';
}

/**
 * Implements hook_zmt_group_delete().
 */
function zmt_ui_zmt_group_delete($group) {
  if ((int) $group->delete_dl > 0 && !empty($group->zimbra_id)) {
    module_load_include('inc', 'zmt', 'includes/zmt.zimbra');
    $api = zimbra_admin_api_by_server($group->server_id);
    zimbra_delete_dl($api, $group->zimbra_id);
  }
}

/**
 * Implements hook_zmt_group_member_presave().
 */
function zmt_ui_zmt_group_member_presave($member) {
  if (!empty($member->id)) {
    $group_name = $member->group;
    $domain_name = $member->domain;
    $server_id = $member->server_id;
  }
  else {
    $group = zmt_group_load($member->group_id);
    $group_name = $group->name;
    $domain_name = !empty($group->domain) ? $group->domain : '';
    $server_id = !empty($group->server_id) ? (int) $group->server_id : 0;
  }

  module_load_include('inc', 'zmt', 'includes/zmt.zimbra');
  $api = zimbra_admin_api_by_server($server_id);
  $dl = zimbra_get_dl($api, $group_name . '@' . $domain_name);
  $members = isset($dl->dlm) ? $dl->dlm : array();
  if (!is_array($members)) {
    $members = array($members);
  }
  if (!in_array($member->name, $members)) {
    zimbra_add_dl_members($api, $dl->id, array($member->name));
  }
}

/**
 * Implements hook_zmt_group_member_delete().
 */
function zmt_ui_zmt_group_member_delete($member) {
  module_load_include('inc', 'zmt', 'includes/zmt.zimbra');
  $api = zimbra_admin_api_by_server($member->server_id);
  $dl = zimbra_get_dl($api, $member->group . '@' . $member->domain);
  $members = isset($dl->dlm) ? $dl->dlm : array();
  if (!is_array($members)) {
    $members = array($members);
  }
  if (in_array($member->name, $members)) {
    zimbra_remove_dl_members($api, $dl->id, array($member->name));
  }
}

/**
 * Implements batch_update_group_members().
 */
function zmt_ui_batch_update_group_members($group, array $members = array()) {
  module_load_include('inc', 'zmt', 'includes/zmt.zimbra');
  $server_id = !empty($group->server_id) ? (int) $group->server_id : 0;
  $domain_name = !empty($group->domain) ? (int) $group->domain : 0;
  if (empty($server_id) && empty($domain_name)) {
    $domain  = zmt_domain_load($group->domain_id);
    $server_id = !empty($domain->server_id) ? (int) $domain->server_id : 0;
    $domain_name = !empty($domain->name) ? $domain->name : '';
  }
  $api = zimbra_admin_api_by_server($server_id);
  $dl_members = zimbra_get_dl_members($api, $group->name . '@' . $domain_name);
  if (!empty($dl_members)) {
    $dl = zimbra_get_dl($api, $group->name . '@' . $domain_name);
    $remove_members = array();
    foreach ($dl_members as $dl_member) {
      if (!in_array($dl_member, $members)) {
        $remove_members[] = $dl_member;
      }
    }
    if (!empty($remove_members)) {
      zimbra_remove_dl_members($api, $dl->id, $remove_members);
    }

    $add_members = array();
    foreach ($members as $member) {
      if (!in_array($member, $dl_members)) {
        $add_members[] = $member;
      }
    }
    if (!empty($add_members)) {
      zimbra_add_dl_members($api, $dl->id, $add_members);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the server edit form.
 */
function zmt_ui_form_zmt_server_edit_form_alter(&$form, &$form_state) {
  $form['name']['#weight'] = -1;
  $form['test_connection'] = array(
    '#type' => 'submit',
    '#value' => t('Test connection'),
    '#weight' => 0,
    '#ajax' => array(
      'callback' => 'ajax_zmt_server_test_connection',
    ),
  );
  $form['#validate'][] = 'zmt_ui_test_server_connection_validate';
}

/**
 * Zimbra server ajax test connection callback.
 */
function ajax_zmt_server_test_connection($form, $form_state) {
  module_load_include('inc', 'zmt', 'includes/zmt.zimbra');

  $values = $form_state['values'];
  $server = $form_state['server'];
  $location = $values['service_location'];
  $user = $values['admin_user'];
  $password = $values['admin_password'];
  if (empty($password)) {
    $password = zmt_password_decrypt($server->admin_password);
  }
  $connected = zimbra_test_connection($location, $user, $password);
  if ($connected) {
    $message = 'Connection to zimbra server success!';
  } else {
    $message = 'Connection to zimbra server failed!';
  }

  $commands = array();
  $commands[] = ajax_command_alert($message);
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Form validation handler for zmt_server_edit_form().
 *
 * @see zmt_server_edit_form()
 */
function zmt_ui_test_server_connection_validate($form, &$form_state) {
  module_load_include('inc', 'zmt', 'includes/zmt.zimbra');
  $values = $form_state['values'];
  $server = $form_state['server'];
  $location = $values['service_location'];
  $user = $values['admin_user'];
  $password = $values['admin_password'];
  if (empty($password)) {
    $password = zmt_password_decrypt($server->admin_password);
  }
  $connected = zimbra_test_connection($location, $user, $password);
  if (!$connected) {
    form_set_error('', t('Connection to zimbra server failed!'));
  }
}
