<?php

/**
 * Test case for Zmt UI tests.
 */
class ZmtUiTestCase extends BackdropWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Zmt UI Web Test Case',
      'description' => 'Test cases for zmt ui functionality.',
      'group' => 'Zmt Modules',
    );
  }

  /**
   * Enable dependency modules.
   */
  public function setUp() {
    parent::setUp(array(
      'entity',
      'zmt_core',
      'zmt_server',
      'zmt_cos',
      'zmt_tenant',
      'zmt_domain',
      'zmt_account',
      'zmt_alias',
      'zmt_group',
      'zmt_server_ui',
      'zmt_cos_ui',
      'zmt_tenant_ui',
      'zmt_domain_ui',
      'zmt_account_ui',
      'zmt_alias_ui',
      'zmt_group_ui',
      'zmt_ui',
    ));
  }

  /**
   * Test operations is implemented.
   */
  public function testZmtUiOperations() {
    $user = $this->backdropCreateUser(array('administer zmt'));
    $this->backdropLogin($user);

    $this->backdropGet('admin/config/system/zmt');
    $this->assertResponse(200, t('Zmt admin user can access the zmt configuration page'));
    $this->assertTitle(t('Zimbra multi-tenancy settings.'));
    $this->assertText(t('Enable debug'));
    $this->assertText(t('Item per page'));
    $this->assertText(t('Item per pull'));

    $user = $this->backdropCreateUser(array('administer any zmt_server'));
    $this->backdropLogin($user);
    $this->backdropGet('zmt/server/pull');
    $this->assertResponse(200, t('Zmt admin user can access the zimbra pull page'));
    $this->assertTitle(t('Pull data from Zimbra Server'));
  }

  /**
   * Test entity hooks is implemented.
   */
  public function testZmtEntityHooks() {
    $this->assertTrue(module_implements('zmt_domain_presave'), t('Implement zmt_domain_presave hook found.'));
    $this->assertTrue(module_implements('zmt_domain_delete'), t('Implement zmt_domain_delete hook found.'));
    $this->assertTrue(module_implements('zmt_account_delete'), t('Implement zmt_account_delete hook found.'));
    $this->assertTrue(module_implements('zmt_alias_presave'), t('Implement zmt_alias_presave hook found.'));
    $this->assertTrue(module_implements('zmt_alias_delete'), t('Implement zmt_alias_delete hook found.'));
    $this->assertTrue(module_implements('zmt_group_presave'), t('Implement zmt_group_presave hook found.'));
    $this->assertTrue(module_implements('zmt_group_delete'), t('Implement zmt_group_delete hook found.'));
    $this->assertTrue(module_implements('group_member_presave'), t('Implement group_member_presave hook found.'));
    $this->assertTrue(module_implements('zmt_group_member_delete'), t('Implement zmt_group_member_delete hook found.'));
    $this->assertTrue(module_implements('batch_update_group_members'), t('Implement batch_update_group_members hook found.'));
    $this->assertTrue(module_implements('form_zmt_server_edit_form_alter'), t('Implement form_zmt_server_edit_form_alter hook found.'));
  }
}
