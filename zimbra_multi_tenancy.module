<?php

/**
 * Implements hook_init().
 */
function zimbra_multi_tenancy_init() {
  module_load_include('inc', 'zimbra_multi_tenancy', 'zimbra_multi_tenancy');
}

/**
 * Implementation of hook_perm().
 */
function zimbra_multi_tenancy_permission() {
  return array(
    'administer zimbra' => array(
      'title' => t('Administer Zimbra Multi-tenancy'),
    ),
  );  
}

/**
 * Implement hook_menu_alter()
 */
function zimbra_multi_tenancy_menu_alter(&$items) {
  if (isset($items['user/%user'])) {
    $items['user/%user']['page callback'] = 'zimbra_profile_page';
  }
}

/**
 * Implements hook_menu().
 */
function zimbra_multi_tenancy_menu() {
  $items['admin/config/system/zimbra-tenancy'] = array(
    'title' => t('Zimbra settings'),
    'description' => 'Zimbra Multi-tenancy settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zimbra_multi_tenancy_settings'),
    'access arguments' => array('administer zimbra'),
    'file' => 'zimbra_multi_tenancy.pages.inc',
  );

  $items['admin/zimbra'] = array(
    'title' => t('Zimbra multi tenancy'),
    'page callback' => 'zimbra_page_content',
    'access arguments' => array('access content'),
    'weight' => 1,
    'file' => 'zimbra_multi_tenancy.pages.inc',
  );

  $items['zimbra/%node/delete'] = array(
    'title' => t('Zimbra delete'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zimbra_confirm_delete', 1),
    'access arguments' => array('access content'),
    'file' => 'zimbra_multi_tenancy.forms.inc',
  );

  $items['zimbra/pull-data/%node'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zimbra_pull_data_form', 2),
    'access callback' => TRUE,
    'access arguments' => array('create server content'),
    'type' => MENU_CALLBACK,
    'file' => 'zimbra_multi_tenancy.forms.inc',
  );

  $items['zimbra/import-mailbox'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('import_mailbox_form'),
    'access callback' => TRUE,
    'access arguments' => array('create account content'),
    'type' => MENU_CALLBACK,
    'file' => 'zimbra_multi_tenancy.forms.inc',
  );

  $items['zimbra'] = array(
    'title' => t('Zimbra content'),
    'page callback' => 'zimbra_page_content',
    'access arguments' => array('access content'),
    'file' => 'zimbra_multi_tenancy.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function zimbra_multi_tenancy_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if($form_id == 'user_login' || $form_id == 'user_login_block') {
    if(!isset($_GET['destination']))
      $form['#action'] = url($_GET['q'], array('query' => array('destination' => 'admin/zimbra')));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function zimbra_multi_tenancy_form_server_node_form_alter(&$form, &$form_state, $form_id) {
  module_load_include('inc', 'zimbra_multi_tenancy', 'zimbra_multi_tenancy.forms');
  _zimbra_preprocess_form_items($form, $form_state);
  zimbra_server_attach_form($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function zimbra_multi_tenancy_form_tenant_node_form_alter(&$form, &$form_state, $form_id) {
  module_load_include('inc', 'zimbra_multi_tenancy', 'zimbra_multi_tenancy.forms');
  _zimbra_preprocess_form_items($form, $form_state);
  zimbra_ternant_attach_form($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function zimbra_multi_tenancy_form_domain_node_form_alter(&$form, &$form_state, $form_id) {
  module_load_include('inc', 'zimbra_multi_tenancy', 'zimbra_multi_tenancy.forms');
  _zimbra_preprocess_form_items($form, $form_state);
  zimbra_domain_attach_form($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function zimbra_multi_tenancy_form_group_node_form_alter(&$form, &$form_state, $form_id) {
  module_load_include('inc', 'zimbra_multi_tenancy', 'zimbra_multi_tenancy.forms');
  _zimbra_preprocess_form_items($form, $form_state);
  zimbra_group_attach_form($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function zimbra_multi_tenancy_form_alias_node_form_alter(&$form, &$form_state, $form_id) {
  module_load_include('inc', 'zimbra_multi_tenancy', 'zimbra_multi_tenancy.forms');
  _zimbra_preprocess_form_items($form, $form_state);
  zimbra_alias_attach_form($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function zimbra_multi_tenancy_form_mailbox_node_form_alter(&$form, &$form_state, $form_id) {
  module_load_include('inc', 'zimbra_multi_tenancy', 'zimbra_multi_tenancy.forms');
  _zimbra_preprocess_form_items($form, $form_state);
  zimbra_mailbox_attach_form($form, $form_state);
}

/**
 * Implements hook_node_delete().
 */
function zimbra_multi_tenancy_node_delete($node) {
  switch($node->type) {
    case 'tenant':
      $uid = isset($node->field_tenant_user[LANGUAGE_NONE][0]['uid']) ? (int) $node->field_tenant_user[LANGUAGE_NONE][0]['uid'] : 0;
      user_delete($uid);
      break;
    case 'domain':
      $uid = isset($node->field_domain_user[LANGUAGE_NONE][0]['uid']) ? (int) $node->field_domain_user[LANGUAGE_NONE][0]['uid'] : 0;
      user_delete($uid);
      delete_alias_by_domain($node->nid);
      delete_group_by_domain($node->nid);
      delete_mailbox_by_domain($node->nid);
      $domain = normalize_domain($node);
      if ($domain->server->nid) {
        module_load_include('inc', 'zimbra_multi_tenancy', 'zimbra_multi_tenancy.zimbra');
        $api = zimbra_admin_api_by_server($domain->server->nid);
        if($domain->server->delete_domain > 0) {
          zimbra_delete_domain($api, $domain->zimbra_id);
        }
      }
      break;
    case 'group':
      $uid = isset($node->field_group_user[LANGUAGE_NONE][0]['uid']) ? (int) $node->field_group_user[LANGUAGE_NONE][0]['uid'] : 0;
      user_delete($uid);
      $group = normalize_group($node);
      $domain = $group->domain;
      if ($domain->server->nid) {
        module_load_include('inc', 'zimbra_multi_tenancy', 'zimbra_multi_tenancy.zimbra');
        $api = zimbra_admin_api_by_server($domain->server->nid);
        if($domain->server->delete_group > 0) {
          zimbra_delete_dl($api, $group->zimbra_id);
        }
      }
      break;
    case 'alias':
      $alias = normalize_alias($node);
      $domain = $alias->domain;
      $mailbox = $alias->mailbox;
      if ($domain->server->nid) {
        module_load_include('inc', 'zimbra_multi_tenancy', 'zimbra_multi_tenancy.zimbra');
        $api = zimbra_admin_api_by_server($domain->server->nid);
        if ($domain->server->delete_alias > 0) {
          $mail_alias = $alias->title . '@' . $domain->title;
          zimbra_remove_account_alias($api, $mail_alias, $mailbox->zimbra_id);
        }
      }
      break;
    case 'mailbox':
      delete_alias_by_mailbox($node->nid);
      $mailbox = normalize_mailbox($node);
      $domain = $mailbox->domain;
      if ($domain->server->nid) {
        module_load_include('inc', 'zimbra_multi_tenancy', 'zimbra_multi_tenancy.zimbra');
        $api = zimbra_admin_api_by_server($domain->server->nid);
        if ($domain->server->delete_mailbox > 0) {
          zimbra_delete_account($api, $mailbox->zimbra_id);
        }
      }
      break;
  }
}

/**
 * Implements hook_views_api().
 */
function zimbra_multi_tenancy_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'zimbra_multi_tenancy') . '/includes/views',
  );
}

/**
 * Implements hook_query_TAG_alter().
 */ 
function zimbra_multi_tenancy_query_zimbra_tenant_filter_alter(QueryAlterableInterface $query) {
  global $user;
  if (!user_access('administer zimbra')) {
    $query->condition('node.uid',$user->uid);
  }
}

/**
 * Implements hook_query_TAG_alter().
 */ 
function zimbra_multi_tenancy_query_zimbra_domain_filter_alter(QueryAlterableInterface $query) {
  global $user;
  if (!user_access('administer zimbra')) {
    $tenants = user_get_tenant($user->uid);
    if (count($tenants)) {
      $tenant_nids = array_keys($tenants);
      $query->leftJoin('field_data_field_domain_tenant', 'fdt', 'fdt.entity_id = node.nid');
      $query->condition('fdt.field_domain_tenant_nid', $tenant_nids);
    }
    else {
      $query->condition('node.uid', $user->uid);
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 */ 
function zimbra_multi_tenancy_query_zimbra_group_filter_alter(QueryAlterableInterface $query) {
  global $user;
  if (!user_access('administer zimbra')) {
    $domains = user_get_domain($user->uid);
    if (count($domains)) {
      $domain_nids = array_keys($domains);
      $query->leftJoin('field_data_field_node_domain', 'fnd', 'fnd.entity_id = node.nid');
      $query->condition('fnd.field_node_domain_nid', $domain_nids);
    }
    else {
      $query->condition('node.uid', $user->uid);
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 */ 
function zimbra_multi_tenancy_query_zimbra_alias_filter_alter(QueryAlterableInterface $query) {
  global $user;
  if (!user_access('administer zimbra')) {
    $domains = user_get_domain($user->uid);
    $domain_nids = array_keys($domains);
    if(count($domain_nids) === 0){
      $domain_nids = array(0); 
    }
    $query->leftJoin('field_data_field_node_domain', 'fnd', 'fnd.entity_id = node.nid');
    $query->condition('fnd.field_node_domain_nid', $domain_nids);

    if (in_array('Group', $user->roles)) {
      $groups = user_get_group($user->uid);
      $group_nids = array_keys($groups);
      if(count($group_nids)) {
        $alias_nids = array();
        foreach ($group_nids as $nid) {
          $alias_nids += list_alias_id_by_group($nid);
        }
        if (empty($alias_nids)) {
          $alias_nids = array(0);
        }
        $query->condition('node.nid', $alias_nids);
      }
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 */ 
function zimbra_multi_tenancy_query_zimbra_mailbox_filter_alter(QueryAlterableInterface $query) {
  global $user;
  if (!user_access('administer zimbra')) {
    $domains = user_get_domain($user->uid);
    $domain_nids = array_keys($domains);
    if(count($domain_nids) === 0){
      $domain_nids = array(0); 
    }
    $query->leftJoin('field_data_field_node_domain', 'fnd', 'fnd.entity_id = node.nid');
    $query->condition('fnd.field_node_domain_nid', $domain_nids);

    if (in_array('Group', $user->roles)) {
      $groups = user_get_group($user->uid);
      $group_nids = array_keys($groups);

      if (count($group_nids)) {
        $mailbox_nids = array();
        foreach ($group_nids as $nid) {
          $mailbox_nids += list_mailbox_id_by_group($nid);
        }
        if (empty($mailbox_nids)) {
          $mailbox_nids = array(0);
        }
        $query->condition('node.nid', $mailbox_nids);
      }
    }
  }
}

/**
 * Auto create user.
 * 
 * @param  string $user_name User name
 * @param  string $user_pass User password
 * @param  string $user_mail User email
 * @param  array  $roles   User roles
 * @return mix
 */
function auto_create_user(
  $user_name = 'zimbra',
  $user_pass = 'zimbra',
  $user_mail = '',
  array $roles = array()
) {
  $user_uid = 0;
  if ($user_name != '' && $user_pass != '') {
    require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
    $zimbra_domain_server = variable_get('zimbra_domain_server', $_SERVER['SERVER_NAME']);
  
    $user_pass = user_hash_password(trim($user_pass));  
    $mail = $user_mail;
    if (empty($mail)) {
      $mail = str_replace(' ', '_', $user_name) . '@' . $zimbra_domain_server;
    }

    $account = new stdClass();
    $account->is_new = true;
    $account->uid = db_next_id(db_query('SELECT MAX(uid) FROM {users}')->fetchField());
    $account->created = REQUEST_TIME;   

    $account->hostname = ip_address();

    $account->administer_users = 1;
    $account->name = $user_name;
    $account->mail = $mail;
    $account->pass = $user_pass;
    $account->status = 1;
    $account->timezone = variable_get('date_default_timezone', date_default_timezone_get());
    $account->init = $mail;
    
    $user_uid = $account->uid;
    $success = drupal_write_record('users', $account);
    
    if(!is_array($roles)) $roles = array();
    if (count($roles) > 0) {
      $query = db_insert('users_roles')->fields(array('uid', 'rid'));
      foreach ($roles as $rid) {
        if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
          $query->values(array(
            'uid' => $account->uid,
            'rid' => $rid,
          ));
        }
      }
      $query->execute();
    }
  }
  return $user_uid;
}

/**
 * Zimbra user profile page
 *
 * @param  object $account Account
 * @return mix
 */
function zimbra_profile_page($account) {
  global $user;
  if (!is_object($account)) return MENU_NOT_FOUND;
  $output = '';
  $tenant_rid = variable_get('zimbra_tenant_role_id', 0);;
  $domain_rid = variable_get('zimbra_domain_role_id', 0);;
  
  //Tenant Infomation
  $tenant_info = '';
  $tenants = user_get_tenant($user->uid);
  if (count($tenants) > 0 && isset($user->roles[$tenant_rid])) {
    foreach ($tenants as $tenant) {
      $quota_value = !empty($tenant->mailbox_max_size) ? $tenant->mailbox_max_size . ' MB': '';
      $number_value = ($tenant->number_of_mailboxes) ? $node->number_of_mailboxes : '';
    
      $tenant_info .= '<div class="profile tenant-wrapper">
        <h3>' . t('Tenant name') . ': ' . $tenant->title . '</h3>
        <ul>
        <li class="field field-label-inline">
          <div class="field-label">' . t('Quota of Mailbox') . ':&nbsp;</div><div class="field-item">' . $quota_value . '</div>
        </li>
        <li class="field field-label-inline">
          <div class="field-label">' . t('Number of Mailbox') . ':&nbsp;</div><div class="field-item">' . $number_value . '</div>
        </li>
        </ul>
      </div>';
    }
  }
  
  //Domain Infomation
  $domain_info = '';
  $user_get_domain = user_get_domain($user->uid);
  if (count($user_get_domain) > 0 && isset($user->roles[$domain_rid])) {
    foreach ($user_get_domain as $key => $value) {
      $node = node_load($key);
      $quota_value = ($node->field_domain_mailbox_max_size['und']) ? $node->field_domain_mailbox_max_size['und'][0]['value'] . ' MB' : '';
      $number_value = ($node->field_domain_number_of_mailboxes['und']) ? $node->field_domain_number_of_mailboxes['und'][0]['value'] : '';
    
      $domain_info .= '<div class="profile tenant-wrapper">
        <h3>Domain name: ' .$node->title . '</h3>
        <ul>
        <li class="field field-label-inline">
          <div class="field-label">' . t('Quota of Mailbox') .':&nbsp;</div><div class="field-item">' . $quota_value .'</div>
        </li>
        <li class="field field-label-inline">
          <div class="field-label">' . ('Number of Mailbox') .':&nbsp;</div><div class="field-item">' . $number_value .'</div>
        </li>
        </ul>
      </div>';
    }
  }
  
  $user_view = user_view($account);
  $output .= $tenant_info . $domain_info . drupal_render($user_view);
  return $output;
}
