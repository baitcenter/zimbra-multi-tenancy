<?php

/**
 * Implements hook_entity_info().
 */
function zmt_cos_entity_info() {
  $entity = array(
    'zmt_cos' => array(
      'label' => t('Class of Service'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'zmt_cos',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'id',
        'label' => 'name',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Class of Service'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'zmt_cos_label',
      'uri callback' => 'zmt_cos_uri',
      'module' => 'zmt_cos',
      'access callback' => 'zmt_cos_access',
    ),
  );

  return $entity;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function zmt_cos_entity_property_info_alter(&$info) {
  // Add related cos to the user object.
  $properties = &$info['zmt_cos']['properties'];
  $properties['server'] = array(
    'type' => 'zmt_server',
    'label' => t('Server'),
    'description' => t('The service\'s server.'),
    'getter callback' => 'zmt_cos_get_properties',
    'schema field' => 'server_id',
  );
  $properties['creator'] = array(
    'type' => 'user',
    'label' => t('Creator'),
    'description' => t('The service\'s creator.'),
    'getter callback' => 'zmt_cos_get_properties',
    'schema field' => 'uid',
  );
}

/**
 * Entity metadata callback to load properties for the given server.
 */
function zmt_cos_get_properties($cos, array $options, $name) {
  switch ($name) {
    case 'server':
      return zmt_server_load($cos->server_id);
    case 'creator':
      return user_load($cos->uid);
  }
}

/**
 * Implements hook_permission().
 */ 
function zmt_cos_permission() {
  return zmt_access_permissions('zmt_cos', 'Class of Service');
}

/**
 * Implements hook_zmt_server_delete().
 */ 
function zmt_cos_zmt_server_delete($server){
  $id = $server ? $server->id : 0;
  zmt_cos_delete_multiple_by_server(array($id));
}

/**
 * Access callback for Zimbra Server.
 */
function zmt_cos_access($op, $cos, $account = NULL, $entity_type = NULL) {
  global $user;
  if (NULL === $account) {
    $account = $user;
  }
  if (user_access('administer zmt', $account) || user_access('administer any zmt_cos', $account)) {
    return TRUE;
  }
  if ($op === 'list' || $op === 'create') {
    return user_access('administer own zmt_cos', $account);
  }
  else {
    $is_own = isset($cos->uid) && $cos->uid == $account->uid;
    return user_access('administer own zmt_cos', $account) && $is_own;
  }
}

/**
 * Zmt cos entity uri callback.
 */
function zmt_cos_uri($cos) {
  return array(
    'path' => 'zmt/cos/' . $cos->id,
  );
}

/**
 * Zmt cos entity label callback.
 */
function zmt_cos_label($cos, $entity_type) {
  return t('Class of Service @name', array('@name' => $cos->name));
}

/**
 * Implements hook_query_TAG_alter().
 */ 
function zmt_cos_query_zmt_cos_load_multiple_alter(QueryAlterableInterface $query) {
  $query->join('zmt_server', 's', 's.id = base.server_id');
  $query->addField('s', 'name', 'server');
}

/**
 * Loads a cos by ID.
 */
function zmt_cos_load($id) {
  if (empty($id)) {
    return FALSE;
  }

  $services = zmt_cos_load_multiple(array($id), array());
  return $services ? reset($services) : FALSE;
}

/**
 * Loads multiple cos by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $ids
 *   An array of cos IDs.
 * @param $conditions
 *   An array of conditions on the {zmt_cos} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal cos loading cache.
 *
 * @return
 *   An array of cos objects indexed by id.
 */
function zmt_cos_load_multiple(array $ids = array(), array $conditions = array(), $reset = FALSE) {
  if (empty($ids) && empty($conditions)) {
    return array();
  }

  return entity_load('zmt_cos', $ids, $conditions, $reset);
}

/**
 * Loads all Class of Services.
 *
 * @see zmt_cos_load_multiple()
 */
function zmt_cos_load_all($limit = 0, $offset = 0){
  $cache = &drupal_static(__FUNCTION__, array());
  $cache_key = $limit + $offset;
  if (!isset($cache[$cache_key])) {
    $efq = new EntityFieldQuery();
    if ((int) $limit > 0) {
      $efq->range($offset, $limit);
    }
    $result = $efq->entityCondition('entity_type', 'zmt_cos')->execute();
    $ids = isset($result['zmt_cos']) ? array_keys($result['zmt_cos']) : array();
    $cache[$cache_key] = zmt_cos_load_multiple($ids);
  }
  return $cache[$cache_key];
}

/**
 * Loads multiple COS by server.
 *
 * @param $server
 *   The user server to load tenant for, or its server_id.
 * @return
 *   An array of cos objects indexed by id.
 *
 * @see zmt_cos_load_multiple()
 */
function zmt_cos_load_multiple_by_server($server, $limit = 0, $offset = 0) {
  $cache = &drupal_static(__FUNCTION__, array());
  $server_id = is_object($server) ? $server->id : $server;
  $cache_key = $server_id + $limit + $offset;
  if (!isset($cache[$cache_key])) {
    $efq = new EntityFieldQuery();
    if ((int) $limit > 0) {
      $efq->range($offset, $limit);
    }
    $result = $efq->entityCondition('entity_type', 'zmt_cos')
      ->propertyCondition('server_id', $server_id)
      ->execute();
    $ids = isset($result['zmt_cos']) ? array_keys($result['zmt_cos']) : array();
    $cache[$cache_key] = zmt_cos_load_multiple($ids);
  }
  return $cache[$cache_key];
}

/**
 * Checks cos exists by zimbra id.
 *
 * @param $zimbra_id
 *   The zimbra id.
 * @return
 *   TRUE or FALSE.
 */
function zmt_cos_exists($zimbra_id) {
  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache[$zimbra_id])) {
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'zmt_cos')
      ->propertyCondition('zimbra_id', $zimbra_id)
      ->count()
      ->execute();
    $cache[$zimbra_id] = (int) $result > 0;
  }
  return $cache[$zimbra_id];
}

/**
 * Returns an initialized cos object.
 *
 * @param $name
 *   The machine-readable name of the cos.
 *
 * @return
 *   A cos object with all default fields initialized.
 */
function zmt_cos_new($name = '') {
  global $user;
  $values = array(
    'server_id' => 0,
    'name' => $name,
    'description' => '',
    'mail_quota' => 0,
    'max_account' => 0,
    'zimbra_id' => '',
    'uid' => $user->uid,
    'created' => REQUEST_TIME,
    'changed' => REQUEST_TIME,
  );
  return entity_get_controller('zmt_cos')->create($values);
}

/**
 * Saves a cos.
 *
 * @param $cos
 *   The full cos object to save.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function zmt_cos_save($cos, $by_entity = TRUE) {
  $cos->changed = REQUEST_TIME;
  if ($by_entity === TRUE) {
    return entity_get_controller('zmt_cos')->save($cos);
  }
  else {
    $fields = array(
      'server_id' => $cos->server_id,
      'name' => $cos->name,
      'description' => $cos->description,
      'mail_quota' => $cos->mail_quota,
      'max_account' => 0,
      'zimbra_id' => $cos->zimbra_id,
      'uid' => $cos->uid,
      'created' => $cos->created,
      'changed' => $cos->changed,
    );
    if (!isset($cos->id) || (int) $cos->id == 0) {
      $cos->id = db_insert('zmt_cos')->fields($fields)->execute();
      return SAVED_NEW;
    }
    else {
      db_update('zmt_cos')
        ->fields($fields)
        ->condition('id', $cos->id)
        ->execute();
      entity_get_controller('zmt_cos')->resetCache(array($cos->id));
      return SAVED_UPDATED;
    }
  }
}

/**
 * Deletes a cos by ID.
 *
 * @param $id
 *   The ID of the cos to delete.
 */
function zmt_cos_delete($id) {
  return zmt_cos_delete_multiple(array($id));
}

/**
 * Deletes multiple cos by ID.
 *
 * @param $ids
 *   An array of cos IDs to delete.
 */
function zmt_cos_delete_multiple(array $ids = array()) {
  entity_get_controller('zmt_cos')->delete($ids);
}

/**
 * Deletes multiple cos by server.
 *
 * @param $server_ids
 *   An array of server IDs.
 */
function zmt_cos_delete_multiple_by_server(array $server_ids = array()) {
  if (!empty($server_ids)) {
    $efq = new EntityFieldQuery();
    $result = $efq->entityCondition('entity_type', 'zmt_cos')
      ->propertyCondition('server_id', $server_ids)
      ->execute();
    $ids = isset($result['zmt_cos']) ? array_keys($result['zmt_cos']) : array();
    zmt_cos_delete_multiple($ids);
  }
}
