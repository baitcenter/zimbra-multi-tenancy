<?php

/**
 * Implements hook_entity_info().
 */
function zmt_tenant_entity_info() {
  $entity = array(
    'zmt_tenant' => array(
      'label' => t('Tenant'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'zmt_tenant',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'id',
        'label' => 'full_name',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Tenant'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'zmt_tenant_label',
      'uri callback' => 'zmt_tenant_uri',
      'module' => 'zmt_tenant',
      'access callback' => 'zmt_tenant_access',
    ),
    'zmt_tenant_cos' => array(
      'label' => t('Class of Service for Tenant'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'zmt_tenant_cos',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'id',
      ),
      'module' => 'zmt_tenant',
      'access callback' => 'zmt_tenant_access',
    ),
  );

  return $entity;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function zmt_tenant_entity_property_info_alter(&$info) {
  // Add related tenant to the user object.
  $properties = &$info['zmt_tenant']['properties'];
  $properties['server_id'] = array(
    'type' => 'zmt_server',
    'label' => t('Server'),
    'description' => t('The tenant\'s server.'),
    'getter callback' => 'zmt_tenant_get_properties',
    'schema field' => 'server_id',
  );
  $properties['cos_id'] = array(
    'type' => 'zmt_cos',
    'label' => t('Service'),
    'description' => t('The tenant\'s class of service.'),
    'getter callback' => 'zmt_tenant_get_properties',
    'schema field' => 'cos_id',
  );
  $properties['tenant_uid'] = array(
    'type' => 'user',
    'label' => t('User'),
    'description' => t('The user representation of this tenant\'s .'),
    'getter callback' => 'zmt_tenant_get_properties',
    'schema field' => 'tenant_uid',
  );
  $properties['uid'] = array(
    'type' => 'user',
    'label' => t('Creator'),
    'description' => t('The tenant\'s creator.'),
    'getter callback' => 'zmt_tenant_get_properties',
    'schema field' => 'uid',
  );
}

/**
 * Entity metadata callback to load tenant's properties.
 */
function zmt_tenant_get_properties($tenant, array $options, $name) {
  switch ($name) {
    case 'server_id':
      return zmt_server_load($tenant->server_id);
    case 'tenant_uid':
      return user_load($tenant->tenant_uid);
    case 'uid':
      return user_load($tenant->uid);
  }
}

/**
 * Implements hook_permission().
 */ 
function zmt_tenant_permission() {
  return zmt_access_permissions('zmt_tenant', 'Tenant');
}

/**
 * Implements hook_query_TAG_alter().
 */ 
function zmt_tenant_query_zmt_tenant_load_multiple_alter(QueryAlterableInterface $query) {
  $query->leftJoin('zmt_server', 'zs', 'zs.id = base.server_id');
  $query->leftJoin('users', 'u', 'u.uid = base.tenant_uid');

  $query->addField('zs', 'name', 'server');
  $query->addField('u', 'name', 'name');
  $query->addField('u', 'mail', 'mail');
  $query->addField('u', 'status', 'status');
}

/**
 * Implements hook_query_TAG_alter().
 */ 
function zmt_tenant_query_zmt_tenant_cos_load_multiple_alter(QueryAlterableInterface $query) {
  $query->leftJoin('zmt_cos', 'zc', 'zc.id = base.cos_id');
  $query->leftJoin('zmt_tenant', 'zt', 'zt.id = base.tenant_id');
  $query->leftJoin('users', 'u', 'u.uid = zt.tenant_uid');
  $query->addField('zc', 'name', 'cos');
  $query->addField('u', 'name', 'tenant');
}

/**
 * Access callback for tenant.
 */
function zmt_tenant_access($op, $tenant, $tenant = NULL, $entity_type = NULL) {
  global $user;
  if (NULL === $tenant) {
    $tenant = $user;
  }
  if (user_access('administer zmt', $tenant) || user_access('administer any zmt_tenant', $tenant)) {
    return TRUE;
  }
  if ($op === 'list' || $op === 'create') {
    return user_access('administer own zmt_tenant', $tenant);
  }
  else {
    $is_own = isset($tenant->uid) && $tenant->uid == $tenant->uid;
    return user_access('administer own zmt_tenant', $tenant) && $is_own;
  }
}

/**
 * Implements hook_user_delete().
 */
function zmt_tenant_user_delete($user) {
  db_delete('zmt_tenant')->condition('tenant_uid', $user->uid)->execute();
}

/**
 * Implements hook_zmt_cos_delete().
 */ 
function zmt_tenant_zmt_cos_delete($cos){
  $id = $cos ? $cos->id : 0;
  zmt_tenant_cos_delete_multiple_by_cos(array($id));
}

/**
 * Zmt tenant entity uri callback.
 */
function zmt_tenant_uri($tenant) {
  return array(
    'path' => 'zmt/tenant/' . $tenant->id,
  );
}

/**
 * Zmt tenant entity label callback.
 */
function zmt_tenant_label($tenant, $entity_type) {
  return t('Tenant @name', array('@name' => $tenant->full_name));
}

/**
 * Loads a tenant by ID.
 */
function zmt_tenant_load($id, $reset = FALSE) {
  if (empty($id)) {
    return FALSE;
  }

  $tenants = zmt_tenant_load_multiple(array($id), array(), $reset);
  return $tenants ? reset($tenants) : FALSE;
}

/**
 * Loads multiple tenant by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $ids
 *   An array of tenant IDs.
 * @param $conditions
 *   An array of conditions on the {zmt_tenant} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal tenant loading cache.
 *
 * @return
 *   An array of tenant objects indexed by id.
 */
function zmt_tenant_load_multiple($ids = array(), array $conditions = array(), $reset = FALSE) {
  if (empty($ids) && empty($conditions)) {
    return array();
  }

  return entity_load('zmt_tenant', $ids, $conditions, $reset);
}

/**
 * Loads all tenants.
 *
 * @see zmt_tenant_load_multiple()
 */
function zmt_tenant_load_all($limit = 0, $offset = 0){
  $cache = &drupal_static(__FUNCTION__, array());
  $cache_key = $limit + $offset;
  if (!isset($cache[$cache_key])) {
    $efq = new EntityFieldQuery();
    if ((int) $limit > 0) {
      $efq->range($offset, $limit);
    }
    $result = $efq->entityCondition('entity_type', 'zmt_tenant')->execute();
    $ids = isset($result['zmt_tenant']) ? array_keys($result['zmt_tenant']) : array();
    $cache[$cache_key] = zmt_tenant_load_multiple($ids);
  }
  return $cache[$cache_key];
}

/**
 * Loads multiple tenant by server.
 *
 * @param $server
 *   The server to load tenant for, or its id.
 * @return
 *   An array of tenant objects indexed by id.
 *
 * @see zmt_tenant_load_multiple()
 */
function zmt_tenant_load_multiple_by_server($server, $limit = 0, $offset = 0) {
  $cache = &drupal_static(__FUNCTION__, array());
  $server_id = is_object($server) ? (int) $server->id : (int) $server;
  $cache_key = $server_id + $limit + $offset;
  if (!isset($cache[$cache_key])) {
    $efq = new EntityFieldQuery();
    if ((int) $limit > 0) {
      $efq->range($offset, $limit);
    }
    $result = $efq->entityCondition('entity_type', 'zmt_tenant')
      ->propertyCondition('server_id', $server_id)
      ->execute();
    $ids = isset($result['zmt_tenant']) ? array_keys($result['zmt_tenant']) : array();
    $cache[$cache_key] = zmt_tenant_load_multiple($ids);
  }
  return $cache[$cache_key];
}

/**
 * Loads tenant by tenant.
 *
 * @param $user
 *   The user tenant to load tenant for, or its uid.
 * 
 * @return
 *   A single tenant entity.
 *
 * @see zmt_tenant_load_multiple()
 */
function zmt_tenant_load_by_user($user) {
  $cache = &drupal_static(__FUNCTION__, NULL);
  $uid = is_object($user) ? $user->uid : (int) $user;
  if (!isset($cache[$uid])) {
    $efq = new EntityFieldQuery();
    $result = $efq->entityCondition('entity_type', 'zmt_tenant')
      ->propertyCondition('tenant_uid', $uid)
      ->execute();
    $ids = isset($result['zmt_tenant']) ? array_keys($result['zmt_tenant']) : array();

    $tenants = zmt_tenant_load_multiple($ids);
    $cache[$uid] = $tenants ? reset($tenants) : FALSE;
  }
  return $cache[$uid];
}

/**
 * Checks user is tenant.
 *
 * @param user
 *   The user tenant.
 * 
 * @return
 *   True if user is tenant.
 */
function zmt_tenant_user_is_tenant($user) {
  $cache = &drupal_static(__FUNCTION__);
  $uid = is_object($user) ? $user->uid : (int) $user;
  if (!isset($cache[$uid])) {
    $query = db_select('zmt_tenant', 't')
      ->fields('t', array('id'))
      ->condition('t.tenant_uid', $uid)
      ->countQuery();
    $num_rows = $query->execute()->fetchField();;

    $cache[$uid] = (int) $num_rows > 0;
  }
  return $cache[$uid];
}

/**
 * Get server of ternant.
 *
 * @param $id
 *   The ternant ID.
 * 
 * @return
 *   Server entity object.
 */
function zmt_ternant_get_server($id) {
  $tenant = zmt_tenant_load($id);
  $server_id = $tenant ? $tenant->server_id : 0;
  return zmt_server_load($server_id);
}

/**
 * Returns an initialized tenant object.
 *
 * @param $full_name
 *   The full name of the tenant.
 *
 * @return
 *   A tenant object with all default fields initialized.
 */
function zmt_tenant_new($full_name = '') {
  global $user;
  $values = array(
    'full_name' => $full_name,
    'server_id' => 0,
    'tenant_uid' => 0,
    'uid' => $user->uid,
    'created' => REQUEST_TIME,
    'changed' => REQUEST_TIME,
  );
  return entity_get_controller('zmt_tenant')->create($values);
}

/**
 * Saves a tenant.
 *
 * @param $tenant
 *   The full tenant object to save.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function zmt_tenant_save($tenant, $by_entity = TRUE) {
  $tenant->changed = REQUEST_TIME;
  if ($by_entity === TRUE) {
    return entity_get_controller('zmt_tenant')->save($tenant);
  }
  else {
    $fields = array(
      'full_name' => $tenant->full_name,
      'server_id' => $tenant->server_id,
      'tenant_uid' => $tenant->tenant_uid,
      'uid' => $tenant->uid,
      'created' => $tenant->created,
      'changed' => $tenant->changed,
    );
    if (!isset($tenant->id) || (int) $tenant->id == 0) {
      $tenant->id = db_insert('zmt_tenant')->fields($fields)->execute();
      return SAVED_NEW;
    }
    else {
      db_update('zmt_tenant')
        ->fields($fields)
        ->condition('id', $tenant->id)
        ->execute();
      entity_get_controller('zmt_tenant')->resetCache(array($tenant->id));
      return SAVED_UPDATED;
    }
  }
}

/**
 * Deletes a tenant by ID.
 *
 * @param $id
 *   The ID of the tenant to delete.
 */
function zmt_tenant_delete($id) {
  zmt_tenant_delete_multiple(array($id));
}

/**
 * Deletes multiple tenants by ID.
 *
 * @param $ids
 *   An array of tenant IDs to delete.
 */
function zmt_tenant_delete_multiple(array $ids = array()) {
  zmt_tenant_cos_delete_multiple_by_tenant($ids);
  entity_get_controller('zmt_tenant')->delete($ids);
}

/**
 * Loads a tenant cos mapping by ID.
 */
function zmt_tenant_cos_load($id) {
  if (empty($id)) {
    return FALSE;
  }

  $entities = zmt_tenant_cos_load_multiple(array($id), array());
  return $entities ? reset($entities) : FALSE;
}

/**
 * Loads multiple tenant cos mapping by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $ids
 *   An array of tenant cos IDs.
 * @param $conditions
 *   An array of conditions on the {zmt_tenant_cos} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal tenant cos loading cache.
 *
 * @return
 *   An array of tenant cos mapping objects indexed by id.
 */
function zmt_tenant_cos_load_multiple($ids = array(), array $conditions = array(), $reset = FALSE) {
  if (empty($ids) && empty($conditions)) {
    return array();
  }

  return entity_load('zmt_tenant_cos', $ids, $conditions, $reset);
}

/**
 * Loads multiple tenant cos mapping by cos ids.
 *
 * @see entity_load()
 *
 * @param $cos_ids
 *   An array of cos IDs.
 *
 * @return
 *   An array of mapping objects indexed by id.
 */
function zmt_tenant_cos_load_multiple_by_cos(array $cos_ids = array(), $tenant_id = NULL) {
  if (!empty($cos_ids)) {
    $cache = &drupal_static(__FUNCTION__, array());
    $cache_key = md5(implode(',', $cos_ids) . $tenant_id);
    if (!isset($cache[$cache_key])) {
      $efq = new EntityFieldQuery();
      $efq->entityCondition('entity_type', 'zmt_tenant_cos')
        ->propertyCondition('cos_id', $cos_ids);
      if (NULL !== $tenant_id) {
        $efq->propertyCondition('tenant_id', $tenant_id);
      }
      $result = $efq->execute();
      $ids = isset($result['zmt_tenant_cos']) ? array_keys($result['zmt_tenant_cos']) : array();
      $cache[$cache_key] = zmt_tenant_cos_load_multiple($ids);
    }
    return $cache[$cache_key];
  }
  return array();
}

/**
 * Loads multiple tenant cos mapping by tenant ids.
 *
 * @see entity_load()
 *
 * @param $tenant_ids
 *   An array of tenant IDs.
 *
 * @return
 *   An array of mapping objects indexed by id.
 */
function zmt_tenant_cos_load_multiple_by_tenant(array $tenant_ids = array(), $cos_id = NULL) {
  if (!empty($tenant_ids)) {
    $cache = &drupal_static(__FUNCTION__, array());
    $cache_key = md5(implode(',', $tenant_ids) . $cos_id);
    if (!isset($cache[$cache_key])) {
      $efq = new EntityFieldQuery();
      $efq->entityCondition('entity_type', 'zmt_tenant_cos')
        ->propertyCondition('tenant_id', $tenant_ids);
      if (NULL !== $cos_id) {
        $efq->propertyCondition('cos_id', $cos_id);
      }
      $result = $efq->execute();
      $ids = isset($result['zmt_tenant_cos']) ? array_keys($result['zmt_tenant_cos']) : array();
      $cache[$cache_key] = zmt_tenant_cos_load_multiple($ids);
    }
    return $cache[$cache_key];
  }
  return array();
}

/**
 * Loads a tenant cos mapping by id of cos and tenant.
 */
function zmt_tenant_cos_load_single($tenant_id, $cos_id) {
  $efq = new EntityFieldQuery();
  $result = $efq->entityCondition('entity_type', 'zmt_tenant_cos')
    ->propertyCondition('tenant_id', $tenant_id)
    ->propertyCondition('cos_id', $cos_id)
    ->execute();
  $ids = isset($result['zmt_tenant_cos']) ? array_keys($result['zmt_tenant_cos']) : array();
  $entities = zmt_tenant_cos_load_multiple($ids);
  return $entities ? reset($entities) : FALSE;
}

/**
 * Returns an initialized tenant cos mapping object.
 *
 * @param $tenant_id
 *   The tenant id.
 * @param $cos_id
 *   The cos id.
 *
 * @return
 *   A tenant cos mapping object with all default fields initialized.
 */
function zmt_tenant_cos_new($tenant_id = 0, $cos_id = 0) {
  global $user;
  $values = array(
    'tenant_id' => (int) $tenant_id,
    'cos_id' => (int) $cos_id,
    'max_account_number' => 0,
    'uid' => $user->uid,
    'created' => REQUEST_TIME,
  );
  return entity_get_controller('zmt_tenant_cos')->create($values);
}

/**
 * Saves a tenant cos mapping.
 *
 * @param $cs
 *   The full tenant cos mapping object to save.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function zmt_tenant_cos_save($mapping, $by_entity = TRUE) {
  if ($by_entity === TRUE) {
    return entity_get_controller('zmt_tenant_cos')->save($mapping);
  }
  else {
    $fields = array(
      'tenant_id' => $mapping->tenant_id,
      'cos_id' => $mapping->cos_id,
      'max_account_number' => (int) $mapping->max_account_number,
      'uid' => $mapping->uid,
      'created' => $mapping->created,
    );
    if (!isset($mapping->id) || (int) $mapping->id == 0) {
      $mapping->id = db_insert('zmt_tenant_cos')->fields($fields)->execute();
      return SAVED_NEW;
    }
    else {
      db_update('zmt_tenant_cos')
        ->fields($fields)
        ->condition('id', $mapping->id)
        ->execute();
      entity_get_controller('zmt_tenant_cos')->resetCache(array($mapping->id));
      return SAVED_UPDATED;
    }
  }
}

/**
 * Deletes a tenant cos mapping by ID.
 *
 * @param $id
 *   The ID of the tenant cos mapping to delete.
 */
function zmt_tenant_cos_delete($id) {
  return zmt_tenant_cos_delete_multiple(array($id));
}

/**
 * Deletes multiple tenant cos mapping by ID.
 *
 * @param $ids
 *   An array of tenant cos mapping IDs to delete.
 */
function zmt_tenant_cos_delete_multiple(array $ids = array()) {
  $services = zmt_tenant_cos_load_multiple($ids);
  entity_get_controller('zmt_tenant_cos')->delete($ids);
}

/**
 * Deletes multiple tenant cos mapping by cos.
 *
 * @param $cos_ids
 *   An array of cos IDs.
 */
function zmt_tenant_cos_delete_multiple_by_cos(array $cos_ids = array()) {
  if (!empty($cos_ids)) {
    $efq = new EntityFieldQuery();
    $result = $efq->entityCondition('entity_type', 'zmt_tenant_cos')
      ->propertyCondition('cos_id', $cos_ids)
      ->execute();
    $ids = isset($result['zmt_tenant_cos']) ? array_keys($result['zmt_tenant_cos']) : array();
    zmt_tenant_cos_delete_multiple($ids);
  }
}

/**
 * Deletes multiple tenant cos mapping by tenant.
 *
 * @param $tenant_ids
 *   An array of tenant IDs.
 */
function zmt_tenant_cos_delete_multiple_by_tenant(array $tenant_ids = array()) {
  if (!empty($tenant_ids)) {
    $efq = new EntityFieldQuery();
    $result = $efq->entityCondition('entity_type', 'zmt_tenant_cos')
      ->propertyCondition('tenant_id', $tenant_ids)
      ->execute();
    $ids = isset($result['zmt_tenant_cos']) ? array_keys($result['zmt_tenant_cos']) : array();
    zmt_tenant_cos_delete_multiple($ids);
  }
}
