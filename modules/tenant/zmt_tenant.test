<?php

/**
 * Tests the zmt tenant.
 */
class ZmtTenantTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Zmt Tenant Test Case',
      'description' => 'Test cases for zmt tenant functionality.',
      'group' => 'Zmt Modules',
    );
  }

  /**
   * Test the zmt tenant CRUD functions.
   */
  function testZmtTenantCrud() {
    $full_name = DrupalTestCase::randomName();
    $tenant_uid = mt_rand();
    $server_id = mt_rand();

    $tenant = zmt_tenant_new($full_name);
    $this->assertTrue(isset($tenant->full_name), t('New tenant full name exists.'));
    $this->assertTrue(isset($tenant->tenant_uid), t('New tenant uid exists.'));
    $this->assertTrue(isset($tenant->server_id), t('New tenant server id exists.'));

    $tenant->tenant_uid = $tenant_uid;
    $tenant->server_id = $server_id;
    zmt_tenant_save($tenant);

    $tenant_load = zmt_tenant_load($tenant->id);
    $this->assertEqual($tenant_load->full_name, $tenant->full_name, t('Loaded tenant full name has same value.'));
    $this->assertEqual($tenant_load->tenant_uid, $tenant->tenant_uid, t('Loaded tenant uid has same value.'));
    $this->assertEqual($tenant_load->server_id, $tenant->server_id, t('Loaded tenant server id has same value.'));

    zmt_tenant_delete($tenant->id);
    $tenant_load = zmt_tenant_load($tenant->id, TRUE);
    $this->assertTrue(empty($tenant_load), t('Tenant deleted.'));
  }

  /**
   * Test the zmt tenant cos mapping CRUD functions.
   */
  function testZmtTenantCosCrud() {
    $tenant_id = mt_rand();
    $cos_id = mt_rand();
    $max_account = mt_rand();

    $tc = zmt_tenant_cos_new($tenant_id, $cos_id);
    $this->assertTrue(isset($tc->tenant_id), t('New mapping tenant id exists.'));
    $this->assertTrue(isset($tc->cos_id), t('New mapping cos id exists.'));
    $this->assertTrue(isset($tc->max_account), t('New mapping max account exists.'));

    $tc->max_account = $max_account;
    zmt_tenant_cos_save($tc);

    $tc_load = zmt_tenant_cos_load($tc->id);
    $this->assertEqual($tc_load->tenant_id, $tc->tenant_id, t('Loaded mapping tenant id has same value.'));
    $this->assertEqual($tc_load->cos_id, $tc->cos_id, t('Loaded mapping cos id has same value.'));
    $this->assertEqual($tc_load->max_account, $tc->max_account, t('Loaded mapping max account has same value.'));

    zmt_tenant_cos_delete($tc->id);
    $tc_load = zmt_tenant_cos_load($tc->id, TRUE);
    $this->assertTrue(empty($tc_load), t('Tenant cos mapping deleted.'));
  }
}
