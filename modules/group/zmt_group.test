<?php

/**
 * Tests the zmt group.
 */
class ZmtGroupTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Zmt Group Test Case',
      'description' => 'Test cases for zmt group functionality.',
      'group' => 'Zmt Modules',
    );
  }

  /**
   * Enable dependency modules.
   */
  public function setUp() {
    parent::setUp(array(
      'entity',
      'zmt_core',
      'zmt_server',
      'zmt_cos',
      'zmt_tenant',
      'zmt_domain',
      'zmt_account',
      'zmt_alias',
      'zmt_group',
    ));
  }

  /**
   * Test the zmt group CRUD functions.
   */
  function testZmtGroupCrud() {
    $name = DrupalTestCase::randomName();
    $full_name = DrupalTestCase::randomName();
    $zimbra_id = DrupalTestCase::randomName();
    $domain_id = mt_rand();
    $group_uid = mt_rand();

    $group = zmt_group_new($name);
    $this->assertTrue(isset($group->name), t('New group name exists.'));
    $this->assertTrue(isset($group->full_name), t('New group full name exists.'));
    $this->assertTrue(isset($group->domain_id), t('New group domain id exists.'));
    $this->assertTrue(isset($group->zimbra_id), t('New group zimbra id exists.'));
    $this->assertTrue(isset($group->group_uid), t('New group uid exists.'));

    $group->full_name = $full_name;
    $group->domain_id = $domain_id;
    $group->zimbra_id = $zimbra_id;
    $group->group_uid = $group_uid;
    zmt_group_save($group);

    $group_load = zmt_group_load($group->id);
    $this->assertEqual($group_load->name, $group->name, t('Loaded group name has same value.'));
    $this->assertEqual($group_load->full_name, $group->full_name, t('Loaded group full name has same value.'));
    $this->assertEqual($group_load->domain_id, $group->domain_id, t('Loaded group domain id has same value.'));
    $this->assertEqual($group_load->zimbra_id, $group->zimbra_id, t('Loaded group zimbra id has same value.'));
    $this->assertEqual($group_load->group_uid, $group->group_uid, t('Loaded group uid has same value.'));

    zmt_group_delete($group->id);
    $group_load = zmt_group_load($group->id, TRUE);
    $this->assertTrue(empty($group_load), t('Group deleted.'));
  }

  /**
   * Test the zmt group member CRUD functions.
   */
  function testZmtGroupMemberCrud() {
    $name = DrupalTestCase::randomName();
    $type = DrupalTestCase::randomName();
    $group_id = mt_rand();
    $member_id = mt_rand();

    $gm = zmt_group_member_new($name);
    $this->assertTrue(isset($gm->name), t('New group member name exists.'));
    $this->assertTrue(isset($gm->group_id), t('New group id exists.'));
    $this->assertTrue(isset($gm->member_id), t('New group member id exists.'));
    $this->assertTrue(isset($gm->type), t('New group member type exists.'));

    $gm->group_id = $group_id;
    $gm->member_id = $member_id;
    $gm->type = $type;
    zmt_domain_cos_save($gm);

    $gm_load = zmt_group_member_load($gm->id);
    $this->assertEqual($gm_load->group_id, $gm->group_id, t('Loaded group id has same value.'));
    $this->assertEqual($gm_load->member_id, $gm->member_id, t('Loaded group member id has same value.'));
    $this->assertEqual($gm_load->type, $gm->type, t('Loaded group member type has same value.'));

    zmt_group_member_delete($gm->id);
    $gm_load = zmt_group_member_load($gm->id, TRUE);
    $this->assertTrue(empty($gm_load), t('Domain group member deleted.'));
  }
}
