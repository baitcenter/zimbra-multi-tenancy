<?php

/**
 * Tests the zmt domain.
 */
class ZmtDomainTestCase extends BackdropWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Zmt Domain Test Case',
      'description' => 'Test cases for zmt domain functionality.',
      'group' => 'Zmt Modules',
    );
  }

  /**
   * Enable dependency modules.
   */
  public function setUp() {
    parent::setUp(array(
      'entity',
      'zmt_core',
      'zmt_server',
      'zmt_cos',
      'zmt_tenant',
      'zmt_domain',
    ));
  }

  /**
   * Test the zmt domain CRUD functions.
   */
  function testZmtDomainCrud() {
    $name = BackdropTestCase::randomName();
    $zimbra_id = BackdropTestCase::randomName();
    $server_id = mt_rand();
    $tenant_id = mt_rand();
    $domain_uid = mt_rand();

    $domain = zmt_domain_new($name);
    $this->assertTrue(isset($domain->name), t('New domain name exists.'));
    $this->assertTrue(isset($domain->server_id), t('New domain server id exists.'));
    $this->assertTrue(isset($domain->tenant_id), t('New domain tenant id exists.'));
    $this->assertTrue(isset($domain->zimbra_id), t('New domain zimbra id exists.'));
    $this->assertTrue(isset($domain->domain_uid), t('New domain uid exists.'));

    $domain->server_id = $server_id;
    $domain->tenant_id = $tenant_id;
    $domain->zimbra_id = $zimbra_id;
    $domain->domain_uid = $domain_uid;
    zmt_domain_save($domain);

    $domain_load = zmt_domain_load($domain->id);
    $this->assertEqual($domain_load->name, $domain->name, t('Loaded domain name has same value.'));
    $this->assertEqual($domain_load->server_id, $domain->server_id, t('Loaded domain server id has same value.'));
    $this->assertEqual($domain_load->tenant_id, $domain->tenant_id, t('Loaded domain tenant id has same value.'));
    $this->assertEqual($domain_load->zimbra_id, $domain->zimbra_id, t('Loaded domain zimbra id has same value.'));
    $this->assertEqual($domain_load->domain_uid, $domain->domain_uid, t('Loaded domain uid has same value.'));

    zmt_domain_delete($domain->id);
    $domain_load = zmt_domain_load($domain->id, TRUE);
    $this->assertTrue(empty($domain_load), t('Domain deleted.'));
  }

  /**
   * Test the zmt domain cos mapping CRUD functions.
   */
  function testZmtDomainCosCrud() {
    $domain_id = mt_rand();
    $cos_id = mt_rand();
    $max_account = mt_rand();

    $dc = zmt_domain_cos_new($domain_id, $cos_id);
    $this->assertTrue(isset($dc->domain_id), t('New mapping domain id exists.'));
    $this->assertTrue(isset($dc->cos_id), t('New mapping cos id exists.'));
    $this->assertTrue(isset($dc->max_account), t('New mapping max account exists.'));

    $dc->max_account = $max_account;
    zmt_domain_cos_save($dc);

    $dc_load = zmt_domain_cos_load($dc->id);
    $this->assertEqual($dc_load->domain_id, $dc->domain_id, t('Loaded mapping domain id has same value.'));
    $this->assertEqual($dc_load->cos_id, $dc->cos_id, t('Loaded mapping cos id has same value.'));
    $this->assertEqual($dc_load->max_account, $dc->max_account, t('Loaded mapping max account has same value.'));

    zmt_domain_cos_delete($dc->id);
    $dc_load = zmt_domain_cos_load($dc->id, TRUE);
    $this->assertTrue(empty($dc_load), t('Domain cos mapping deleted.'));
  }
}
