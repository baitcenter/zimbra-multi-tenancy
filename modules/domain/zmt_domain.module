<?php

/**
 * Implements hook_entity_info().
 */
function zmt_domain_entity_info() {
  $entity = array(
    'zmt_domain' => array(
      'label' => t('Domain'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'zmt_domain',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'id',
        'label' => 'name',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Domain'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'zmt_domain_label',
      'uri callback' => 'zmt_domain_uri',
      'module' => 'zmt_domain',
      'access callback' => 'zmt_domain_access',
    ),
  );

  return $entity;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function zmt_domain_entity_property_info_alter(&$info) {
  $properties = &$info['zmt_domain']['properties'];
  $properties['server_id'] = array(
    'type' => 'zmt_server',
    'label' => t('Server'),
    'description' => t('The domain\'s server.'),
    'getter callback' => 'zmt_domain_get_properties',
    'schema field' => 'server_id',
  );
  $properties['cos_id'] = array(
    'type' => 'zmt_cos',
    'label' => t('Service'),
    'description' => t('The domain\'s class of service.'),
    'getter callback' => 'zmt_domain_get_properties',
    'schema field' => 'cos_id',
  );
  $properties['tenant_id'] = array(
    'type' => 'zmt_tenant',
    'label' => t('Tenant'),
    'description' => t('The domain\'s tenant.'),
    'getter callback' => 'zmt_domain_get_properties',
    'schema field' => 'tenant_id',
  );
  $properties['domain_uid'] = array(
    'type' => 'user',
    'label' => t('User'),
    'description' => t('The user representation of this domain\'s .'),
    'getter callback' => 'zmt_domain_get_properties',
    'schema field' => 'domain_uid',
  );
  $properties['uid'] = array(
    'type' => 'user',
    'label' => t('Creator'),
    'description' => t('The domain\'s creator.'),
    'getter callback' => 'zmt_domain_get_properties',
    'schema field' => 'uid',
  );
}

/**
 * Entity metadata callback to load domain's properties.
 */
function zmt_domain_get_properties($domain, array $options, $name) {
  switch ($name) {
    case 'server_id':
      return zmt_server_load($domain->server_id);
    case 'cos_id':
      return zmt_cos_load($domain->cos_id);
    case 'tenant_id':
      return zmt_domain_load($domain->tenant_id);
    case 'tenant_uid':
      return user_load($domain->tenant_uid);
    case 'uid':
      return user_load($domain->uid);
  }
}

/**
 * Implements hook_permission().
 */ 
function zmt_domain_permission() {
  return zmt_access_permissions('zmt_domain', 'Domain');
}

/**
 * Access callback for Zimbra Server.
 */
function zmt_domain_access($op, $domain, $account = NULL, $entity_type = NULL) {
  global $user;
  if (NULL === $account) {
    $account = $user;
  }
  if (user_access('administer zmt', $account) || user_access('administer any zmt_domain', $account)) {
    return TRUE;
  }
  if ($op === 'list' || $op === 'create') {
    return user_access('administer own zmt_domain', $account);
  }
  else {
    $is_own = isset($domain->uid) && $domain->uid == $account->uid;
    return user_access('administer own zmt_domain', $account) && $is_own;
  }
}

/**
 * Zmt domain entity uri callback.
 */
function zmt_domain_uri($domain) {
  return array(
    'path' => 'zmt/domain/' . $domain->id,
  );
}

/**
 * Zmt domain entity label callback.
 */
function zmt_domain_label($domain, $entity_type) {
  return t('Domain') . ' ' . $domain->name;
}

/**
 * Implements hook_query_TAG_alter().
 */ 
function zmt_domain_query_tenant_count_domain_alter(QueryAlterableInterface $query) {
  $sub_query = db_select('zmt_domain', 'd')
    ->fields('d', array('tenant_id'))
    ->groupBy('d.tenant_id');
  $sub_query->addExpression('COUNT(d.id)', 'total_domain');
  $query->leftJoin($sub_query, 'd', 'd.tenant_id = t.id');
  $query->addExpression('IFNULL(d.total_domain, 0)', 'total_domain');
}

/**
 * Implements hook_query_TAG_alter().
 */ 
function zmt_domain_query_tenant_sum_account_alter(QueryAlterableInterface $query) {
  $domain_id = (int) $query->getMetaData('domain_id');
  $sub_query = db_select('zmt_domain', 'd')
    ->fields('d', array('tenant_id'))
    ->condition('d.id', $domain_id, '!=')
    ->groupBy('d.tenant_id');
  $sub_query->addExpression('SUM(d.account_max_number)', 'total_account');
  $query->leftJoin($sub_query, 'd', 'd.tenant_id = t.id');
  $query->addExpression('IFNULL(d.total_account, 0)', 'total_account');
}

/**
 * Implements hook_query_TAG_alter() for zmt_domain_load_multiple query tag.
 */ 
function zmt_domain_query_zmt_domain_load_multiple_alter(QueryAlterableInterface $query) {
  $query->leftJoin('zmt_server', 'zs', 'zs.id = base.server_id');
  $query->leftJoin('zmt_tenant', 'zt', 'zt.id = base.tenant_id');
  $query->leftJoin('users', 'tu', 'tu.uid = zt.tenant_uid');
  $query->leftJoin('users', 'du', 'du.uid = base.domain_uid');

  $query->addField('zs', 'name', 'server');
  $query->addField('zs', 'delete_domain');
  $query->addField('tu', 'name', 'tenant');
  $query->addField('du', 'mail', 'mail');
  $query->addField('du', 'status', 'status');
}

/**
 * Implements hook_zmt_server_delete().
 */ 
function zmt_domain_zmt_server_delete($server){
  $id = $server ? $server->id : 0;
  zmt_domain_delete_multiple_by_server(array($id));
}

/**
 * Implements hook_user_delete().
 */
function zmt_domain_user_delete($account) {
  db_update('zmt_domain')
    ->fields(array(
      'domain_uid' => 0,
    ))
    ->condition('domain_uid', $account->uid)
    ->execute();
}

/**
 * Loads a domain by ID.
 *
 * @param $id
 *   A domain ID.
 * @return
 *   A domain object or FALSE.
 */
function zmt_domain_load($id) {
  if (empty($id)) {
    return FALSE;
  }

  $domains = zmt_domain_load_multiple(array($id), array());
  return $domains ? reset($domains) : FALSE;
}

/**
 * Loads multiple domain by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $ids
 *   An array of domain IDs.
 * @param $conditions
 *   An array of conditions on the {zmt_domain} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal domain loading cache.
 *
 * @return
 *   An array of domain objects indexed by id.
 */
function zmt_domain_load_multiple(array $ids = array(), array $conditions = array(), $reset = FALSE) {
  if (empty($ids) && empty($conditions)) {
    return array();
  }

  return entity_load('zmt_domain', $ids, $conditions, $reset);
}

/**
 * Loads all domain.
 *
 * @return
 *   An array of domain objects indexed by id.
 *
 * @see zmt_domain_load_multiple()
 */
function zmt_domain_load_all($filter_by_user = FALSE) {
  global $user;
  $cache = &drupal_static(__FUNCTION__, array());
  $cache_key = $filter_by_user === TRUE ? md5('true') : md5('false');
  if (!isset($cache[$cache_key])) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'zmt_domain');
    if ($filter_by_user) {
      if (!(user_access('administer zmt')
        || user_access('administer any zmt_domain'))) {
        $query->condition('d.uid', $user->uid);
      }
    }
    $result = $query->execute();
    $ids = isset($result['zmt_domain']) ? array_keys($result['zmt_domain']) : array();
    $cache[$cache_key] = zmt_domain_load_multiple($ids);
  }
  return $cache[$cache_key];
}

/**
 * Loads multiple domain by server.
 *
 * @param $server
 *   The server to load domain for, or its id.
 * @return
 *   An array of domain objects indexed by id.
 *
 * @see zmt_domain_load_multiple()
 */
function zmt_domain_load_multiple_by_server($server, $filter_by_user = FALSE) {
  global $user;
  $cache = &drupal_static(__FUNCTION__, array());
  $server_id = is_object($server) ? $server->id : $server;
  $cache_key = $filter_by_user === TRUE ? md5($server_id . '-' . 'true') : md5($server_id . '-' . 'false');
  if (!isset($cache[$cache_key])) {
    $query = db_select('zmt_domain', 'd');
    $query->leftJoin('zmt_tenant', 't', 't.id = d.tenant_id');
    $query->leftJoin('users', 'u', 'u.uid = t.tenant_uid');
    $query->condition('d.server_id', $server_id);
    if ($filter_by_user) {
      if (!(user_access('administer zmt', $user))) {
        if (user_access('administer any zmt_domain', $user)) {
          $query->condition('u.uid', $user->uid);
        }
        elseif (user_access('administer own zmt_domain', $user)) {
          $query->condition('d.uid', $user->uid);
        }
        else {
          $query->condition('d.domain_uid', $user->uid);
        }
      }
      $result = $query->fields('d', array('id'))->execute();
    }
    $result = $query->fields('d', array('id'))->execute();

    $ids = array();
    foreach ($result as $data) {
      $ids[] = $data->id;
    }
    if (empty($ids)) {
      $ids = module_invoke_all('domain_load_by_user');
    }

    // $query = new EntityFieldQuery();
    // $query->entityCondition('entity_type', 'zmt_domain')
    //   ->propertyCondition('server_id', $server_id);
    // if ($filter_by_user) {
    //   if (!(user_access('administer zmt')
    //     || user_access('administer any zmt_domain'))) {
    //     $query->condition('d.uid', $user->uid);
    //   }
    // }
    // $result = $query->execute();
    // $ids = isset($result['zmt_domain']) ? array_keys($result['zmt_domain']) : array();
    $cache[$cache_key] = zmt_domain_load_multiple($ids);
  }
  return $cache[$cache_key];
}

/**
 * Loads multiple domain by tenant.
 *
 * @param $tenant
 *   The tenant to load domain for, or its id.
 * @return
 *   An array of domain objects indexed by id.
 *
 * @see zmt_domain_load_multiple()
 */
function zmt_domain_load_multiple_by_tenant($tenant) {
  $cache = &drupal_static(__FUNCTION__, array());
  $tenant_id = is_object($tenant) ? $tenant->id : $tenant;
  if (!isset($cache[$tenant_id])) {
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'zmt_domain')
      ->propertyCondition('tenant_id', $tenant_id)
      ->execute();
    $ids = isset($result['zmt_domain']) ? array_keys($result['zmt_domain']) : array();
    $cache[$tenant_id] = zmt_domain_load_multiple($ids);
  }
  return $cache[$tenant_id];
}

/**
 * Loads multiple domain by user.
 *
 * @param $domain_user
 *   The user to load domain.
 * @return
 *   An array of domain objects indexed by id.
 *
 * @see zmt_domain_load_multiple()
 */
function zmt_domain_load_multiple_by_user($domain_user = NULL) {
  global $user;
  if (NULL === $domain_user) {
    $domain_user = $user;
  }
  $cache = &drupal_static(__FUNCTION__, array());
  if (!isset($cache[$domain_user->uid])) {
    $query = db_select('zmt_domain', 'd');
    $query->leftJoin('zmt_tenant', 't', 't.id = d.tenant_id');
    $query->leftJoin('users', 'u', 'u.uid = t.tenant_uid');
    if (!(user_access('administer zmt', $domain_user))) {
      if (user_access('administer any zmt_domain', $domain_user)) {
        $query->condition('u.uid', $domain_user->uid);
      }
      elseif (user_access('administer own zmt_domain', $domain_user)) {
        $query->condition('d.uid', $domain_user->uid);
      }
      else {
        $query->condition('d.domain_uid', $domain_user->uid);
      }
    }
    $result = $query->fields('d', array('id'))->execute();

    $ids = array();
    foreach ($result as $data) {
      $ids[] = $data->id;
    }
    if (empty($ids)) {
      $ids = module_invoke_all('domain_load_by_user');
    }
    $cache[$user->uid] = zmt_domain_load_multiple($ids);
  }
  return $cache[$user->uid];
}

/**
 * Loads a domain by name.
 * @param $name
 *   The account name.
 * @return
 *   A domain object or FALSE.
 */
function zmt_domain_load_by_name($name) {
  $cache = &drupal_static(__FUNCTION__, array());
  if (!isset($cache[$name])) {
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'zmt_domain')
      ->propertyCondition('name', $name)
      ->execute();
    $ids = isset($result['zmt_domain']) ? array_keys($result['zmt_domain']) : array();
    $domains = zmt_domain_load_multiple($ids);
    $cache[$name] = $domains ? reset($domains) : FALSE;
  }
  return $cache[$name];
}

/**
 * Get server of domain.
 *
 * @param $id
 *   The domain ID.
 * @return
 *   Server entity object.
 */
function zmt_domain_get_server($id) {
  $domain = zmt_domain_load($id);
  $server_id = $domain ? $domain->server_id : 0;
  return zmt_server_load($server_id);
}

/**
 * Count number of accounts in domain.
 *
 * @param $id
 *   The domain ID.
 * @return
 *   Total number of accouns.
 */
function zmt_domain_count_accounts($id) {
  $total_account = 0;
  $query = db_select('zmt_domain', 'd');
  $result = $query->fields('d', array('id'))
    ->condition('d.id', (int) $id)
    ->range(0, 1)
    ->addTag('domain_count_account')
    ->execute();
  foreach ($result as $domain) {
    $total_account = isset($domain->total_account) ? $domain->total_account : 0;
  }
  return $total_account;
}

/**
 * Gets remain number of accounts.
 *
 * @param $id
 *   The domain ID.
 * @return
 *   Remain number of accouns.
 */
function zmt_domain_account_number_remain($id){
  $account_remain = 0;
  $domain = zmt_domain_load($id);
  if ($domain) {
    $account_max_number = (int) $domain->account_max_number;
    $total_account = zmt_domain_count_accounts($id);
    $account_remain = $account_max_number - $total_account;
  }
  return $account_remain;
}

/**
 * Checks domain exists by server.
 *
 * @param $name
 *   The domain name.
 * @param $id
 *   The domain id.
 * @return
 *   TRUE or FALSE.
 */
function zmt_domain_exists($name, $id = 0) {
  $cache = &drupal_static(__FUNCTION__, array());
  $cache_key = md5($name . '-' . $id);
  if (!isset($cache[$cache_key])) {
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'zmt_domain')
      ->propertyCondition('name', $name)
      ->propertyCondition('id', $id, '!=')
      ->count()
      ->execute();
    $cache[$cache_key] = (int) $result > 0;
  }
  return $cache[$cache_key];
}

/**
 * Returns an initialized domain object.
 *
 * @param $name
 *   The machine-readable name of the domain.
 *
 * @return
 *   A domain object with all default fields initialized.
 */
function zmt_domain_new($name = '') {
  global $user;
  $values = array(
    'server_id' => 0,
    'cos_id' => 0,
    'tenant_id' => 0,
    'name' => $name,
    'account_max_number' => 0,
    'zimbra_id' => '',
    'domain_uid' => 0,
    'uid' => $user->uid,
    'created' => REQUEST_TIME,
    'changed' => REQUEST_TIME,
  );
  return entity_get_controller('zmt_domain')->create($values);
}

/**
 * Saves a domain.
 *
 * @param $domain
 *   The full domain object to save.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function zmt_domain_save($domain, $by_entity = TRUE) {
  $domain->changed = REQUEST_TIME;
  if ($by_entity === TRUE) {
    return entity_get_controller('zmt_domain')->save($domain);
  }
  else {
    $fields = array(
      'server_id' => $domain->server_id,
      'cos_id' => $domain->cos_id,
      'tenant_id' => $domain->tenant_id,
      'name' => $domain->name,
      'account_max_number' => $domain->account_max_number,
      'zimbra_id' => $domain->zimbra_id,
      'domain_uid' => $domain->domain_uid,
      'uid' => $domain->uid,
      'created' => $domain->created,
      'changed' => $domain->changed,
    );
    if (!isset($domain->id) || (int) $domain->id == 0) {
      $domain->id = db_insert('zmt_domain')->fields($fields)->execute();
      return SAVED_NEW;
    }
    else {
      unset($fields['id']);
      db_update('zmt_domain')
        ->fields($fields)
        ->condition('id', $domain->id)
        ->execute();
      entity_get_controller('zmt_domain')->resetCache(array($domain->id));
      return SAVED_UPDATED;
    }
  }
}

/**
 * Deletes a domain by ID.
 *
 * @param $id
 *   The ID of the domain to delete.
 */
function zmt_domain_delete($id) {
  return zmt_domain_delete_multiple(array($id));
}

/**
 * Deletes multiple domain by ID.
 *
 * @param $ids
 *   An array of domain IDs to delete.
 */
function zmt_domain_delete_multiple(array $ids = array()) {
  entity_get_controller('zmt_domain')->delete($ids);
}

/**
 * Deletes multiple domain by ID.
 *
 * @param $ids
 *   An array of domain IDs to delete.
 */
function zmt_domain_delete_multiple_by_server(array $ids = array()) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'zmt_domain')
    ->propertyCondition('server_id', $ids)
    ->execute();
  $domain_ids = isset($result['zmt_domain']) ? array_keys($result['zmt_domain']) : array();
  zmt_domain_delete_multiple($domain_ids);
}
