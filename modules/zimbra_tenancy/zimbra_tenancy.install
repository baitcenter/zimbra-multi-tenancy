<?php
/**
 * Install the module with a new database table
 * @file
 */

/**
 * Implements hook_install().
 */
function zimbra_tenancy_install() {
  // add nodetype with zimbra
  _zimbra_add_nodetype_tenant();
  _zimbra_add_nodetype_domain();
  _zimbra_add_nodetype_group();
  _zimbra_add_nodetype_alias();
  _zimbra_add_nodetype_mailbox();  
}


/**
 * Create Tenant node type.
 */
function _zimbra_add_nodetype_tenant() {
  // Create a newsletter type if needed.
  $type = node_type_get_type('tenant');
  if (!$type) {
    $type = node_type_set_defaults(array(
      'type' => 'tenant',
      'name' => t('Tenant'),
      'title_label' => t('Tenant name'),
      'base' => 'node_content',
      'description' => t('Content type for Tenant'),
      'locked' => 0,
      'custom' => 1,
      'modified' => 1,
      ));
    node_type_save($type);
    //node_add_body_field($type);
  }
  	//Add any field of tenant content type
  zimbra_add_text_field($type, 'field_tenant_fullname', 'Tenant fullname', 1);
  zimbra_add_text_field($type, 'field_tenant_password', 'Tenant password', 2);
  
  zimbra_add_integer_field($type, 'field_tenant_mailbox_max_size', 'Mailbox max size', 3);
  zimbra_add_integer_field($type, 'field_tenant_number_of_mailboxes', 'Number Of Mailboxes', 4);
}

/**
 * Create Domain node type.
 */
function _zimbra_add_nodetype_domain() {
  // Create a newsletter type if needed.
  $type = node_type_get_type('domain');
  if (!$type) {
    $type = node_type_set_defaults(array(
      'type' => 'domain',
      'name' => t('Domain'),
      'title_label' => t('Domain name'),
      'base' => 'node_content',
      'description' => t('Content type for Domain'),
      'locked' => 0,
      'custom' => 1,
      'modified' => 1,
      ));
    node_type_save($type);
    //node_add_body_field($type);
  }
  	//Add any field of tenant content type
  zimbra_add_text_field($type, 'field_domain_password', 'Domain password', 1);
  
  zimbra_add_node_reference_field($type, 'field_domain_tenant_id', 'Tenant id', 2, 'tenant');
  zimbra_add_integer_field($type, 'field_domain_mailbox_max_size', 'Mailbox max size', 3);
  zimbra_add_integer_field($type, 'field_domain_number_of_mailboxes', 'Number Of Mailboxes', 4);
}

/**
 * Create Group node type.
 */
function _zimbra_add_nodetype_group() {
  // Create a newsletter type if needed.
  $type = node_type_get_type('group');
  if (!$type) {
    $type = node_type_set_defaults(array(
      'type' => 'group',
      'name' => t('Group'),
      'title_label' => t('Group name'),
      'base' => 'node_content',
      'description' => t('Content type for Group'),
      'locked' => 0,
      'custom' => 1,
      'modified' => 1,
      ));
    node_type_save($type);
    //node_add_body_field($type);
  }
  	//Add any field of tenant content type
  zimbra_add_text_field($type, 'field_group_fullname', 'Group fullname', 1);
  
  zimbra_add_node_reference_field($type, 'field_group_domain_id', 'Domain id', 2, 'domain');
  zimbra_add_text_long_field($type, 'field_group_members', 'Tenant id', 3, 'tenant');
}

/**
 * Create Alias node type.
 */
function _zimbra_add_nodetype_alias() {
  // Create a newsletter type if needed.
  $type = node_type_get_type('alias');
  if (!$type) {
    $type = node_type_set_defaults(array(
      'type' => 'alias',
      'name' => t('Alias'),
      'title_label' => t('Alias name'),
      'base' => 'node_content',
      'description' => t('Content type for Alias'),
      'locked' => 0,
      'custom' => 1,
      'modified' => 1,
      ));
    node_type_save($type);
    //node_add_body_field($type);
  }
  	//Add any field of tenant content type
  zimbra_add_node_reference_field($type, 'field_alias_domain_id', 'Domain id', 2, 'domain');
  zimbra_add_text_field($type, 'field_alias_mapping_mailbox', 'Mapping mailbox', 3);
}

/**
 * Create Mailbox node type.
 */
function _zimbra_add_nodetype_mailbox() {
  // Create a newsletter type if needed.
  $type = node_type_get_type('mailbox');
  if (!$type) {
    $type = node_type_set_defaults(array(
      'type' => 'mailbox',
      'name' => t('Mailbox'),
      'title_label' => t('Mailbox name'),
      'base' => 'node_content',
      'description' => t('Content type for Alias'),
      'locked' => 0,
      'custom' => 1,
      'modified' => 1,
      ));
    node_type_save($type);
    //node_add_body_field($type);
  }
  	//Add any field of tenant content type
  zimbra_add_text_field($type, 'field_mailbox_fullname', 'Mailbox fullname', 1);
  zimbra_add_text_field($type, 'field_mailbox_password', 'Mailbox password', 2);
  	
  zimbra_add_node_reference_field($type, 'field_mailbox_domain_id', 'Domain id', 3, 'domain');
  zimbra_add_integer_field($type, 'field_mailbox_size', 'Mailbox size', 4);
}





/**
 * Add the text field
 *
 * @param $type
 *   A node type object.
 *
 * @ingroup issue
 */
function zimbra_add_text_field($type, $field_name, $field_label ='', $weight =0) {
  $field = field_info_field($field_name);
  $instance = field_info_instance('node', $field_name, $type->type);
  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'text',
      'entity_types' => array('node'),
    );
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'node',
      'bundle' => $type->type,
      'label' => t($field_label),
      'widget' => array('type' => 'text_textfield', 'weight' => $weight),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'text_default',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'text_default',
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Add the text field
 *
 * @param $type
 *   A node type object.
 *
 * @ingroup issue
 */
function zimbra_add_text_long_field($type, $field_name, $field_label ='', $weight =0) {
  $field = field_info_field($field_name);
  $instance = field_info_instance('node', $field_name, $type->type);
  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'text_long',
      'entity_types' => array('node'),
    );
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'node',
      'bundle' => $type->type,
      'label' => t($field_label),
      'widget' => array('type' => 'text_textarea', 'weight' => $weight),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'text_default',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'text_default',
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Add the Integer field
 *
 * @param $type
 *   A node type object.
 *
 * @ingroup issue
 */
function zimbra_add_integer_field($type, $field_name, $field_label ='', $weight =0) {
  $field = field_info_field($field_name);
  $instance = field_info_instance('node', $field_name, $type->type);
  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'number_integer',
      'entity_types' => array('node'),
    );
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'node',
      'bundle' => $type->type,
      'label' => t($field_label),
      'widget' => array('type' => 'number', 'weight' => $weight),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'number_integer',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'number_integer',
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Add the Integer field
 *
 * @param $type
 *   A node type object.
 *
 * @ingroup issue
 */
function zimbra_add_node_reference_field($type, $field_name, $field_label ='', $weight =0, $reference ='article') {
  $field = field_info_field($field_name);
  $instance = field_info_instance('node', $field_name, $type->type);
  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'node_reference',
      'entity_types' => array(),
      'settings' => array(
      	'referenceable_types' => array($reference =>$reference),
      ),
    );
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'node',
      'bundle' => $type->type,
      'label' => t($field_label),
      'widget' => array('type' => 'options_select', 'weight' => $weight),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'node_reference_default',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'node_reference_default',
        ),
      ),
    );
    field_create_instance($instance);
  }
}



