<?php

/**
 * Implements hook_init().
 */
function zimbra_tenancy_init(){
	drupal_add_js(drupal_get_path('module', 'zimbra_tenancy') .'/zimbra_tenancy.js');	
	
	//$type = node_type_get_type('article');
	//print_r($type);
	
	$field_name ='field_tenant_user';
	$field = field_info_field($field_name);
	//print_r( $field);print '|';

	$instance = field_info_instance('node', $field_name, 'tenant');
	//print_r($instance);
	
	//print_r(node_type_load('tenant'));
}

/**
 * Implementation of hook_perm().
 */
function zimbra_tenancy_permission() {
  return array(
    'administer zimbra' => array(
      'title' => t('Administer Zimbra Multi-tenancy'),
    ),
    'manage any tenant' => array(
      'title' => t('Manage Any Tenant'),
    ),
    'manage own tenant' => array(
      'title' => t('Manage Own Tenant'),
    ),
  );  
}

/**
 * Implements hook_form_alter().
 */
function zimbra_tenancy_form_alter(&$form, &$form_state, $form_id){
	global $user;
	//print_r($user);
	if($form_id =='tenant_node_form'){
		$tenant_access =0;
		if(user_access('administer zimbra')){
			$tenant_access =1;
		}		
		if($tenant_access !=1){
		    drupal_access_denied();
		    exit;
		}
		$form['field_tenant_user']['und']['#options']['_none'] =t('New user');
		$form['#validate'][] ='tenant_validate';
	}
	
	if($form_id =='domain_node_form'){
		
		//Check permission create, edit domain
		$user_get_tenant =user_get_tenant($user ->uid);
		if( count($user_get_tenant) <1){
			drupal_access_denied();
			exit;
		}
		//Disable change Domain name
		if(arg(2) =='edit') $form['title']['#access'] =0;
		
		$form['field_domain_tenant_id']['und']['#options'] =$user_get_tenant;
		$form['field_domain_user']['und']['#options']['_none'] =t('New user');
		$form['#validate'][] ='domain_validate';
	}
	
	if($form_id =='group_node_form'){
	    drupal_add_css(drupal_get_path('module', 'zimbra_tenancy') .'/zimbra_tenancy.css');
		$user_get_domain =user_get_domain($user ->uid);
		if( count($user_get_domain) <1){
			drupal_access_denied();
			exit;
		}
		$nid =$form['nid']['#value'];
		
		$all_account =user_get_all_account($user ->uid);
		$account_list =array();
		$members_list =array();
		
		$members_default_array =explode('|', $form['field_group_members']['und'][0]['value']['#default_value']);
		
		if(count($members_default_array) >0){
		    foreach($members_default_array as $value){
		        $mem_arr =explode(':', $value);
		        $mem_val ='';
		        if(count($mem_arr) >1 && isset($all_account[$mem_arr[1]])) $mem_val =$all_account[$mem_arr[1]];
		        if($mem_val =='') $mem_val =$value;
		        
		        if($value !='') $members_list[$value] =$mem_val;
		    }
		}
		
		foreach( $all_account as $key =>$value){
		    $acc_key ='A:' .$key;
		    if(!in_array($acc_key, $members_default_array) && $key !=$nid) $account_list[$acc_key] =$value;
		}
				
		$form['field_group_account_list'] =array(
		    '#type' =>'select',
		    '#title' =>'Account list',
		    '#multiple' => 1,
		    '#size' =>8,
		    '#weight' =>5,
		    '#options' =>$account_list,
		    '#prefix' =>'<table cellspacing="0" cellpadding="0" border="0" class="tbl-add-remove-wrap"> <tr> <td class="td-item-left">',
		    '#suffix' =>'
		    </td>
		    <td class="td-item-center">
		        <div class="form-item">
		            <div class="add"><input type="button" value="' .t('=>') .'" id="members_add"></div>
		            <div class="remove"><input type="button" value="' .t('<=') .'" id="members_remove"></div>
		        </div>
		    </td>
            <td class="td-item-right">',
		);		
		
		$form['field_group_members_list'] =array(
		    '#type' =>'select',
		    '#title' =>'Members list',
		    '#multiple' => 1,
		    '#size' =>8,
		    '#weight' =>8,
		    '#options' =>$members_list,
		    '#suffix' =>'</td> </tr> </table>',
		);
		$form['field_group_members_value'] = array('#type' => 'hidden', '#default_value' => '');
		
		$form['field_group_members']['#prefix'] ='<div style="display: none;">';
		$form['field_group_members']['#suffix'] ='</div>';
		$form['field_node_domain_id']['und']['#options'] =$user_get_domain;
		$form['#validate'][] ='group_validate';
		$form['#attributes'] = array('onsubmit' => 'javascript: group_before_validate();');
	}

	if($form_id =='alias_node_form'){
		$user_get_mailbox =user_get_mailbox($user ->uid);
		$user_get_domain =user_get_domain($user ->uid);
		if( count($user_get_domain) <1){
			drupal_access_denied();
			exit;
		}
		$form['field_node_domain_id']['und']['#options'] =$user_get_domain;
		$form['field_alias_mapping_mailbox']['und']['#options'] =$user_get_mailbox;
		$form['#validate'][] ='alias_validate';
	}

	if($form_id =='mailbox_node_form'){
		$user_get_domain =user_get_domain($user ->uid);
		if( count($user_get_domain) <1){
			drupal_access_denied();
			exit;
		}
		$form['field_node_domain_id']['und']['#options'] =$user_get_domain;
		$form['#validate'][] ='mailbox_validate';
	}	
	
	//Disable comment optional
	if($form_id =='tenant_node_form' || $form_id =='domain_node_form' || $form_id =='group_node_form' || $form_id =='alias_node_form' || $form_id =='mailbox_node_form'){
		$form['comment_settings']['comment']['#default_value'] =1;
	}
}

/**
 * Implements hook_menu().
 */
function zimbra_tenancy_menu(){
  $items['admin/config/zimbra-tenancy'] = array(
    'title' => t('Zimbra tenancy settings'),
    'description' => 'Zimbra Multi-tenancy settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zimbra_tenancy_settings'),
    'access arguments' => array('administer zimbra'),
    'file' => 'zimbra_tenancy.admin.inc',
  );

  $items['admin/zimbra'] = array(
    'title' => t('Zimbra'),
    'page callback' => 'zimbra_page_content',
    'access arguments' => array('access content'),
    'weight' => 1,
  );
  
  $items['admin/zimbra/add'] = array(
    'title' => t('Zimbra add content'),
    'page callback' => 'zimbra_page_addcontent',
    'access arguments' => array('access content'),
    'weight' => 1,
  );
      
  $zimbra_content_type =array('tenant', 'domain', 'group', 'alias', 'mailbox');
  $i =0;
  foreach($zimbra_content_type as $key){
    $i++;
    $node_type =node_type_load($key);
  	if(is_object($node_type)){
	  $items['admin/zimbra/add/' .$key] = array(
	    'title' => t($node_type ->name),
	    'page callback' => 'zimbra_page_addcontent',
	    'access arguments' => array('create ' .$key .' content'),
	    'description' => $node_type ->description,
	    'weight' => $i,
	  );
	}
  }
  
  $items['admin/zimbra1'] = array(
    'title' => t('Zimbra1'),
    'page callback' => 'zimbra_page_content1',
    'access arguments' => array('access zimbra'),
    'weight' => 1,
  );
   
  return $items;
}

function zimbra_page_content(){
	$output ='';
	return $output;
}

function zimbra_page_addcontent(){
	$type =arg(3);
	
	if($type ==''){
	  $item = menu_get_item();
	  $content = system_admin_menu_block($item);
	  
	  if (count($content) == 1) {
		$item = array_shift($content);
		drupal_goto($item['href']);
	  }
	  return theme('node_add_list', array('content' => $content));
	}else{
		drupal_goto('node/add/' .$type);
		return '';
	}
}

function tenant_mailbox_maxsize_allow( $tenant_id =0){
	
}
function tenant_number_mailboxes_allow( $tenant_id =0){
	
}

//Check validate of Tenant
function tenant_validate($form, &$form_state){
	if(!form_set_error()){
		$tenant_name =trim($form_state['values']['title']);
		$nid =intval($form_state['values']['nid']);
		
			//Check existence of tenant
		$sql ="SELECT nid AS nid FROM node n WHERE n.nid !=$nid AND n.type IN ('tenant') AND n.title ='$tenant_name'";
		$result = db_query($sql);
		$tenant_exist =0;
		foreach($result as $data){
			if($data ->nid !='') $tenant_exist =1;
		}
		if($tenant_exist ==1){
			form_set_error('title', t('@username already exists.', array('@username' =>$form['title']['#title'])));
		}
		
			//Check user manage tenant
		$tenant_user =$form_state['values']['field_tenant_user']['und'][0]['uid'];
		if(empty($tenant_user)){
			$user_name =trim($form_state['values']['field_tenant_user_name']['und'][0]['value']);
			$user_pass =trim($form_state['values']['field_tenant_user_password']['und'][0]['value']);
			
			if($user_name !=''){
				if( $error =user_validate_name( $user_name)){
					form_set_error('field_tenant_user_name', $error);
				}elseif($user_pass ==''){
					form_set_error('field_tenant_user_password', t('Please entered password field.'));
				}else{
					$sql ="SELECT uid AS uid FROM users u WHERE u.name ='$user_name'";
					$result = db_query($sql);
					$user_uid =0;
					foreach($result as $data){
						if($data ->uid !='') $user_uid =$data ->uid;
					}
					if($user_uid == 0){
						$user_uid =zimbra_auto_create_user($user_name, $user_pass);
					}
					$form_state['values']['field_tenant_user']['und'][0]['uid'] =$user_uid;					
					
				}
			}
		}
		
		//Clear value of user
		if(!form_set_error()){
			$form_state['values']['title'] =trim($form_state['values']['title']);
			$form_state['values']['field_tenant_user_name']['und'][0]['value'] ='';
			$form_state['values']['field_tenant_user_password']['und'][0]['value'] ='';	
		}
	}
}

//Check validate of Domain
function domain_validate($form, &$form_state){

	if(!form_set_error()){
		$domain_name =trim($form_state['values']['title']);
		$nid =intval($form_state['values']['nid']);
		
		//Check invalid of domain
		if(!preg_match('!^[a-zA-Z0-9_.]+$!', $domain_name) || !preg_match('/\./', $domain_name) || preg_match('/\.$/', $domain_name)){
			form_set_error('title', t('Invalid @fieldname.', array('@fieldname' =>$form['title']['#title'])));
		}
				
		//Check existence of domain
		$sql ="SELECT nid AS nid FROM node n WHERE n.nid !=$nid AND n.type IN ('domain') AND n.title ='$domain_name'";
		$result = db_query($sql);
		$domain_exist =0;
		foreach($result as $data){
			if($data ->nid !='') $domain_exist =1;
		}
		if($domain_exist ==1){
			form_set_error('title', t('@username already exists.', array('@username' =>$form['title']['#title'])));
		}
		
		//Check validate mailbox maxsize is avaiable of tenant
		//$tenant_mailbox_maxsize_allow =tenant_mailbox_maxsize_allow();
		
		//Check validate number mailboxes is avaiable of tenant
		//$tenant_number_mailboxes_allow =tenant_number_mailboxes_allow();

		
			//Check user manage tenant
		$domain_user =$form_state['values']['field_domain_user']['und'][0]['uid'];

		if(empty($domain_user)){
			$user_name =trim($form_state['values']['field_domain_user_name']['und'][0]['value']);
			$user_pass =trim($form_state['values']['field_domain_user_password']['und'][0]['value']);
			
			if($user_name !=''){
				if( $error =user_validate_name( $user_name)){
					form_set_error('field_domain_user_name', $error);
				}elseif($user_pass ==''){
					form_set_error('field_domain_user_password', t('Please entered password field.'));
				}else{
					$sql ="SELECT uid AS uid FROM users u WHERE u.name ='$user_name'";
					$result = db_query($sql);
					$user_uid =0;
					foreach($result as $data){
						if($data ->uid !='') $user_uid =$data ->uid;
					}
					if($user_uid == 0){
						$user_uid =zimbra_auto_create_user($user_name, $user_pass);
					}
					$form_state['values']['field_domain_user']['und'][0]['uid'] =$user_uid;
				}
			}
		}
		
		//Clear value of user
		if(!form_set_error()){
			$form_state['values']['title'] =trim($form_state['values']['title']);
			$form_state['values']['field_domain_user_name']['und'][0]['value'] ='';
			$form_state['values']['field_domain_user_password']['und'][0]['value'] ='';	
			
			//Insert into queue_command table
			if($nid ==0){
				$command ='Create new Domain: ' .$domain_name;
				$notes ='Create new Domain';
				$sql ="INSERT INTO zimbra_queuedcommand(command, notes, status) VALUES('$command', '$notes', 0);";
				@db_query($sql);
			}
		}
	}	
}

//Check validate of Mailbox
function mailbox_validate($form, &$form_state){
	if(!form_set_error()){
		$mailbox_name =trim($form_state['values']['title']);
		$mailbox_domain =$form_state['values']['field_node_domain_id']['und'][0]['nid'];
		$nid =intval($form_state['values']['nid']);
		
		//Check invalid of Mailbox name
		if(!preg_match('!^[a-zA-Z0-9_\.]+$!', $mailbox_name)){
			form_set_error('title', t('The @fieldname must contain only letters, punctuation, numbers, and underscores.', array('@fieldname' =>$form['title']['#title'])));
		}
		
		//Check existence of mailbox.
		$mailbox_exist =mailbox_check_exists($mailbox_name, $mailbox_domain, $nid);
		if($mailbox_exist ==1){
			form_set_error('title', t('Group or Mailbox or Alias already exists.', array('@username' =>$form['title']['#title'])));
		}		


		if(!form_set_error()){		
			$form_state['values']['title'] =trim($form_state['values']['title']);
			
			//Insert into queue_command table
			if($nid ==0){
				$mail_domain =node_load($mailbox_domain);
				$mail_address =$mailbox_name .'@' .$mail_domain->title;
				
				$command ='Create new Mailbox: ' .$mail_address;
				$notes ='Create new Mailbox';
				$sql ="INSERT INTO zimbra_queuedcommand(command, notes, status) VALUES('$command', '$notes', 0);";
				@db_query($sql);
			}
		}
	}	
}

//Check validate of Alias
function alias_validate($form, &$form_state){
	if(!form_set_error()){
		$mailbox_name =trim($form_state['values']['title']);
		$mailbox_domain =$form_state['values']['field_node_domain_id']['und'][0]['nid'];
		$nid =intval($form_state['values']['nid']);
		
		//Check invalid of Mailbox name
		if(!preg_match('!^[a-zA-Z0-9_\.]+$!', $mailbox_name)){
			form_set_error('title', t('The @fieldname must contain only letters, punctuation, numbers, and underscores.', array('@fieldname' =>$form['title']['#title'])));
		}
		
		//Check existence of mailbox.
		$mailbox_exist =mailbox_check_exists($mailbox_name, $mailbox_domain, $nid);
		if($mailbox_exist ==1){
			form_set_error('title', t('Group or Mailbox or Alias already exists.', array('@username' =>$form['title']['#title'])));
		}		
		
		
		if(!form_set_error()){
			$form_state['values']['title'] =trim($form_state['values']['title']);

			//Insert into queue_command table
			if($nid ==0){
				$mail_domain =node_load($mailbox_domain);
				$mail_address =$mailbox_name .'@' .$mail_domain->title;
				
				$command ='Create new Alias: ' .$mail_address;
				$notes ='Create new Alias';
				$sql ="INSERT INTO zimbra_queuedcommand(command, notes, status) VALUES('$command', '$notes', 0);";
				@db_query($sql);
			}			
		}
	}	
}

//Check validate of Group
function group_validate($form, &$form_state){
	if(!form_set_error()){
		global $user;
		
		$mailbox_name =trim($form_state['values']['title']);
		$mailbox_domain =$form_state['values']['field_node_domain_id']['und'][0]['nid'];
		$nid =intval($form_state['values']['nid']);
		
		//Check invalid of Mailbox name
		if(!preg_match('!^[a-zA-Z0-9_\.]+$!', $mailbox_name)){
			form_set_error('title', t('The @fieldname must contain only letters, punctuation, numbers, and underscores.', array('@fieldname' =>$form['title']['#title'])));
		}
		
		//Check existence of mailbox.
		$mailbox_exist =mailbox_check_exists($mailbox_name, $mailbox_domain, $nid);
		if($mailbox_exist ==1){
			form_set_error('title', t('Group or Mailbox or Alias already exists.', array('@username' =>$form['title']['#title'])));
		}		
		if(!form_set_error()){		
			$form_state['values']['title'] =trim($form_state['values']['title']);

			//Insert into queue_command table
			if($nid ==0){
				$mail_domain =node_load($mailbox_domain);
				$mail_address =$mailbox_name .'@' .$mail_domain->title;
				
				$all_account =user_get_all_account($user ->uid);
				$members_list ='';
		
				$members_default_array =explode('|', $form_state['values']['field_group_members']['und']['value']);
		
				if(count($members_default_array) >0){
					foreach($members_default_array as $value){
						$mem_arr =explode(':', $value);
						$mem_val ='';
						if(count($mem_arr) >1 && isset($all_account[$mem_arr[1]])) $mem_val =$all_account[$mem_arr[1]];
						if($mem_val =='') $mem_val =$value;
						
						if( $members_list !='') $members_list .='|' ;
						if($mem_val !='') $members_list .=$mem_val;
					}
				}
					
				
				$command ='Create new Group: ' .$mail_address .' Members: ' .$members_list;
				$notes ='Create new Group';
				$sql ="INSERT INTO zimbra_queuedcommand(command, notes, status) VALUES('$command', '$notes', 0);";
				@db_query($sql);
			}
			exit;
		}
	}	
}


function mailbox_check_exists($mailbox_name, $mailbox_domain, $nid =0){
	$mailbox_exist =0;
	
	//Check in Mailbox table
	$sql ="SELECT n.title AS n_title, n.nid AS nid
		FROM node n LEFT JOIN field_data_field_node_domain_id fmd ON n.nid = fmd.entity_id
		WHERE (n.status = '1') AND n.nid !=$nid AND n.type IN ('mailbox')
		 AND n.title ='$mailbox_name' AND (fmd.field_node_domain_id_nid IN ('$mailbox_domain'))";
		
	$result = db_query($sql);
	foreach($result as $data){
		if($data ->nid !='') $mailbox_exist =1;
	}
	
	//Check in Alias table
	if($mailbox_exist !=1){
		$sql ="SELECT n.title AS n_title, n.nid AS nid
			FROM node n LEFT JOIN field_data_field_node_domain_id fmd ON n.nid = fmd.entity_id
			WHERE (n.status = '1') AND n.nid !=$nid AND n.type IN ('alias')
			 AND n.title ='$mailbox_name' AND (fmd.field_node_domain_id_nid IN ('$mailbox_domain'))";
		
		$result = db_query($sql);
		foreach($result as $data){
			if($data ->nid !='') $mailbox_exist =1;
		}
	}
	
	//Check in Group table
	if($mailbox_exist !=1){
		$sql ="SELECT n.title AS n_title, n.nid AS nid
			FROM node n LEFT JOIN field_data_field_node_domain_id fmd ON n.nid = fmd.entity_id
			WHERE (n.status = '1') AND n.nid !=$nid AND n.type IN ('alias')
			 AND n.title ='$mailbox_name' AND (fmd.field_node_domain_id_nid IN ('$mailbox_domain'))";
		
		$result = db_query($sql);
		foreach($result as $data){
			if($data ->nid !='') $mailbox_exist =1;
		}
	}
	
	return $mailbox_exist;
}

//Get all Tenant of user
function user_get_tenant( $uid){
	$output =array();	
	$uid =intval($uid);
	
	if($uid !=0){
		$iWhere ="";
		$iJoin ="";
		if(!user_access('administer zimbra')){
			$iWhere =" AND (fdu.field_tenant_user_uid =$uid)";
			$iJoin =" LEFT JOIN field_data_field_tenant_user fdu ON n.nid = fdu.entity_id
			 AND (fdu.entity_type = 'node' AND fdu.deleted = '0')";
		}
		
		//$sql ="SELECT nid AS nid, n.title AS title FROM node n WHERE n.status =1 $iWhere ORDER BY title ASC";
		
		$sql ="SELECT n.title AS n_title, n.nid AS nid, n.created AS n_created
			FROM node n $iJoin
			WHERE (n.status = '1') AND n.type ='tenant' $iWhere
			ORDER BY n_title ASC";		
		$result = db_query($sql);
		//print $sql;
		
		foreach($result as $data){
			$output[$data ->nid] =$data ->n_title;
		}
	}
	return $output;
}

//Get all domain of user
function user_get_domain( $uid){
	$output =array();	
	$uid =intval($uid);
	
	if($uid !=0){
		$iWhere ="";
		$iJoin ="";
		if(!user_access('administer zimbra')){		
			$user_get_tenant =user_get_tenant($uid);
			//print_r( $user_get_tenant);
			if( count($user_get_tenant) >0){
				$iWhere_tenant ="";
				foreach($user_get_tenant as $key =>$value){
					if($iWhere_tenant !='') $iWhere_tenant .=",";
					$iWhere_tenant .="'$key'";
				}
				//print_r($iWhere_tenant);

				$iWhere =" AND (fdt.field_domain_tenant_id_nid IN ($iWhere_tenant))";
				$iJoin =" LEFT JOIN field_data_field_domain_tenant_id fdt ON n.nid = fdt.entity_id
				 AND (fdt.entity_type = 'node' AND fdt.deleted = '0')";
				
			}else{
				$iWhere =" AND (fdu.field_domain_user_uid =$uid)";
				$iJoin =" LEFT JOIN field_data_field_domain_user fdu ON n.nid = fdu.entity_id
				 AND (fdu.entity_type = 'node' AND fdu.deleted = '0')";
			}
		}
		
		//$sql ="SELECT nid AS nid, n.title AS title FROM node n WHERE n.status =1 $iWhere ORDER BY title ASC";
		
		$sql ="SELECT n.title AS n_title, n.nid AS nid, n.created AS n_created
			FROM node n $iJoin
			WHERE (n.status = '1') AND n.type ='domain' $iWhere
			ORDER BY n_title ASC";		
		$result = db_query($sql);
		//print $sql;
		
		foreach($result as $data){
			$output[$data ->nid] =$data ->n_title;
		}
	}
	return $output;
}

    //Get all mailbox of user
function user_get_mailbox( $uid){
	$output =array();
	$user_get_domain =user_get_domain($uid);
	
	$iWhere_domain ="";
	foreach($user_get_domain as $key =>$value){
	    if($iWhere_domain !='')$iWhere_domain .=",";
	    $iWhere_domain .="'$key'";
	}
	if($iWhere_domain !=''){
	    $sql ="SELECT n.title AS mailbox, n.nid AS nid, n2.title AS domain
		    FROM node n LEFT JOIN field_data_field_node_domain_id fmd ON n.nid = fmd.entity_id AND (fmd.entity_type = 'node' AND fmd.deleted = '0')
		     LEFT JOIN node n2 ON fmd.field_node_domain_id_nid =n2.nid
		    WHERE (n.status = '1') AND (n.type IN ('mailbox')) AND (fmd.field_node_domain_id_nid IN ($iWhere_domain))
		    ORDER BY mailbox ASC, domain ASC";
		
	    $result = db_query($sql);
	    foreach($result as $data){
		    $output[$data ->nid] =$data ->mailbox .'@' .$data ->domain;
	    }
	}
	
	return $output;
}

    //Get all mailbox of user
function user_get_all_account($uid){
	$output =array();
	$user_get_domain =user_get_domain($uid);
	
	$iWhere_domain ="";
	foreach($user_get_domain as $key =>$value){
	    if($iWhere_domain !='')$iWhere_domain .=",";
	    $iWhere_domain .="'$key'";
	}
	if($iWhere_domain !=''){
	    $sql ="SELECT n.title AS mailbox, n.nid AS nid, n2.title AS domain
		    FROM node n LEFT JOIN field_data_field_node_domain_id fmd ON n.nid = fmd.entity_id AND (fmd.entity_type = 'node' AND fmd.deleted = '0')
		     LEFT JOIN node n2 ON fmd.field_node_domain_id_nid =n2.nid
		    WHERE (n.status = '1') AND (n.type IN ('mailbox', 'alias', 'group')) AND (fmd.field_node_domain_id_nid IN ($iWhere_domain))
		    ORDER BY mailbox ASC, domain ASC";
		
	    $result = db_query($sql);
	    foreach($result as $data){
		    $output[$data ->nid] =$data ->mailbox .'@' .$data ->domain;
	    }
	}
	
	return $output;
}



function zimbra_auto_create_user($user_name ='', $user_pass ='123456'){
	$user_uid =0;
	if($user_name !='' && $user_pass !=''){
		require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
		$zimbra_domain_server =variable_get('zimbra_domain_server', 'iwayvietnam.com');
	
		$user_pass = user_hash_password(trim($user_pass));		
		$mail =str_replace(' ', '_', $user_name) .'@' .$zimbra_domain_server;

		$account = new stdClass();
		$account->is_new =TRUE;
		$account->uid = db_next_id(db_query('SELECT MAX(uid) FROM {users}')->fetchField());
		$account->created = REQUEST_TIME;	

		$account->hostname = ip_address();

		$account->administer_users = 1;
		$account->name = $user_name;
		$account->mail =$mail;
		$account->pass = $user_pass;
		$account->status = 1;
		$account->timezone = variable_get('date_default_timezone', date_default_timezone_get());
		$account->init = $mail;
		
		$user_uid =$account->uid;
    	$success = drupal_write_record('users', $account);
    	$account->roles[DRUPAL_AUTHENTICATED_RID] = 'authenticated user';
		if (count($account->roles) > 1) {
		    $query = db_insert('users_roles')->fields(array('uid', 'rid'));
		    foreach (array_keys($account->roles) as $rid) {
		      if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
		        $query->values(array(
		          'uid' => $account->uid,
		          'rid' => $rid,
		        ));
		      }
		    }
		    $query->execute();
		}
	}
	return $user_uid;
}

function zimbra_page_content1(){
	_zimbra_add_nodetype_tenant();
	_zimbra_add_nodetype_domain();
	_zimbra_add_nodetype_group();
	_zimbra_add_nodetype_alias();
	_zimbra_add_nodetype_mailbox();
	require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
	$zimbra_domain_server =variable_get('zimbra_domain_server', 'iwayvietnam.com');
	
	$user_new ='testuser';
	$pass ='123456';
    $pass = user_hash_password(trim($pass));
    
    $mail =$user_new .'@' .$zimbra_domain_server;


	$account = new stdClass();
	$account->is_new =TRUE;
	$account->uid = db_next_id(db_query('SELECT MAX(uid) FROM {users}')->fetchField());
	$account->created = REQUEST_TIME;
	
	
	//[uid] =&gt; 5
    $account->hostname = ip_address();
    $account->roles = array( 4 => 4, 5 => 5, 2 => 1,);

    $account->administer_users = 1;
    $account->name = $user_new;
    $account->mail =$mail;
    $account->pass = $pass;
    $account->status = 1;
    $account->timezone = variable_get('date_default_timezone', date_default_timezone_get());
    //[signature] =&gt; 
    //[picture] =&gt; 
    //[picture_delete] =&gt; 0
    //[picture_upload] =&gt; 
    //[signature_format] =&gt; filtered_html
    $account->init = $mail;

/*    
    $success = drupal_write_record('users', $account);
    $account->roles[DRUPAL_AUTHENTICATED_RID] = 'authenticated user';
    
    //user_module_invoke('insert', $edit, $account, $category);
    //module_invoke_all('entity_insert', $account, 'user');
    
      // Save user roles.
      if (count($account->roles) > 1) {
        $query = db_insert('users_roles')->fields(array('uid', 'rid'));
        foreach (array_keys($account->roles) as $rid) {
          if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
            $query->values(array(
              'uid' => $account->uid,
              'rid' => $rid,
            ));
          }
        }
        $query->execute();
      }
*/
	print_r($account);
	return 'Pass: ' .$pass;
}




/**
 * Verify the syntax of the given name.
 */
function zimbra_user_validate_name($name, $field_name ='username') {
  if (!$name) {
    return t('You must enter a @username.', array('@username' =>$field_name));
  }
  if (substr($name, 0, 1) == ' ') {
    return t('The @username cannot begin with a space.', array('@username' =>$field_name));
  }
  if (substr($name, -1) == ' ') {
    return t('The @username cannot end with a space.', array('@username' =>$field_name));
  }
  if (strpos($name, '  ') !== FALSE) {
    return t('The @username cannot contain multiple spaces in a row.', array('@username' =>$field_name));
  }
  if (preg_match('/[^\x{80}-\x{F7} a-z0-9@_.\'-]/i', $name)) {
    return t('The @username contains an illegal character.', array('@username' =>$field_name));
  }
  if (preg_match('/[\x{80}-\x{A0}' .         // Non-printable ISO-8859-1 + NBSP
                  '\x{AD}' .                // Soft-hyphen
                  '\x{2000}-\x{200F}' .     // Various space characters
                  '\x{2028}-\x{202F}' .     // Bidirectional text overrides
                  '\x{205F}-\x{206F}' .     // Various text hinting characters
                  '\x{FEFF}' .              // Byte order mark
                  '\x{FF01}-\x{FF60}' .     // Full-width latin
                  '\x{FFF9}-\x{FFFD}' .     // Replacement characters
                  '\x{0}-\x{1F}]/u',        // NULL byte and control characters
                  $name)) {
    return t('The username contains an illegal character.', array('@username' =>$field_name));
  }
  if (drupal_strlen($name) > USERNAME_MAX_LENGTH) {
    return t('The @username %name is too long: it must be %max characters or less.', array('%name' => $name, '%max' => USERNAME_MAX_LENGTH, '@username' =>$field_name));
  }
}








/**
 * Create Tenant node type.
 */
function _zimbra_add_nodetype_tenant() {
  // Create a newsletter type if needed.
  $type = node_type_get_type('tenant');
  if (!$type) {
    $type = node_type_set_defaults(array(
      'type' => 'tenant',
      'name' => t('Tenant'),
      'title_label' => t('Tenant name'),
      'base' => 'node_content',
      'description' => t('Content type for Tenant'),
      'locked' => 0,
      'custom' => 1,
      'modified' => 1,
      ));
    node_type_save($type);
    //node_add_body_field($type);
  }
  	//Add any field of tenant content type
  zimbra_add_integer_field($type, 'field_tenant_mailbox_max_size', 'Mailbox max size', 1);
  zimbra_add_integer_field($type, 'field_tenant_number_of_mailboxes', 'Number Of Mailboxes', 2);

  zimbra_add_user_reference_field($type, 'field_tenant_user', 'Tenant user', 3);
  zimbra_add_text_field($type, 'field_tenant_user_name', 'Tenant user name', 4);
  zimbra_add_text_field($type, 'field_tenant_user_password', 'Tenant user password', 5);
}

/**
 * Create Domain node type.
 */
function _zimbra_add_nodetype_domain() {
  // Create a newsletter type if needed.
  $type = node_type_get_type('domain');
  if (!$type) {
    $type = node_type_set_defaults(array(
      'type' => 'domain',
      'name' => t('Domain'),
      'title_label' => t('Domain name'),
      'base' => 'node_content',
      'description' => t('Content type for Domain'),
      'locked' => 0,
      'custom' => 1,
      'modified' => 1,
      ));
    node_type_save($type);
    //node_add_body_field($type);
  }
  	//Add any field of tenant content type  
  zimbra_add_node_reference_field($type, 'field_domain_tenant_id', 'Tenant', 1, 'tenant');
  zimbra_add_integer_field($type, 'field_domain_mailbox_max_size', 'Mailbox max size', 2);
  zimbra_add_integer_field($type, 'field_domain_number_of_mailboxes', 'Number Of Mailboxes', 3);
  
  zimbra_add_user_reference_field($type, 'field_domain_user', 'Domain user', 4);
  zimbra_add_text_field($type, 'field_domain_user_name', 'Domain user name', 5);
  zimbra_add_text_field($type, 'field_domain_user_password', 'Domain user password', 6);  
}

/**
 * Create Group node type.
 */
function _zimbra_add_nodetype_group() {
  // Create a newsletter type if needed.
  $type = node_type_get_type('group');
  if (!$type) {
    $type = node_type_set_defaults(array(
      'type' => 'group',
      'name' => t('Group'),
      'title_label' => t('Group name'),
      'base' => 'node_content',
      'description' => t('Content type for Group'),
      'locked' => 0,
      'custom' => 1,
      'modified' => 1,
      ));
    node_type_save($type);
    //node_add_body_field($type);
  }
  	//Add any field of tenant content type
  zimbra_add_text_field($type, 'field_group_fullname', 'Group fullname', 1);
  
  zimbra_add_node_reference_field($type, 'field_node_domain_id', 'Domain name', 2, 'domain');
  zimbra_add_text_long_field($type, 'field_group_members', 'Members', 3);
}

/**
 * Create Alias node type.
 */
function _zimbra_add_nodetype_alias() {
  // Create a newsletter type if needed.
  $type = node_type_get_type('alias');
  if (!$type) {
    $type = node_type_set_defaults(array(
      'type' => 'alias',
      'name' => t('Alias'),
      'title_label' => t('Alias name'),
      'base' => 'node_content',
      'description' => t('Content type for Alias'),
      'locked' => 0,
      'custom' => 1,
      'modified' => 1,
      ));
    node_type_save($type);
    //node_add_body_field($type);
  }
  	//Add any field of tenant content type
  zimbra_add_node_reference_field($type, 'field_node_domain_id', 'Domain', 2, 'domain');
  zimbra_add_node_reference_field($type, 'field_alias_mapping_mailbox', 'Mapping mailbox', 3, 'mailbox');
}

/**
 * Create Mailbox node type.
 */
function _zimbra_add_nodetype_mailbox() {
  // Create a newsletter type if needed.
  $type = node_type_get_type('mailbox');
  if (!$type) {
    $type = node_type_set_defaults(array(
      'type' => 'mailbox',
      'name' => t('Mailbox'),
      'title_label' => t('Mailbox name'),
      'base' => 'node_content',
      'description' => t('Content type for Alias'),
      'locked' => 0,
      'custom' => 1,
      'modified' => 1,
      ));
    node_type_save($type);
    //node_add_body_field($type);
  }
  	//Add any field of tenant content type
  zimbra_add_text_field($type, 'field_mailbox_fullname', 'Mailbox fullname', 1);
  zimbra_add_text_field($type, 'field_mailbox_password', 'Mailbox password', 2);
  	
  zimbra_add_node_reference_field($type, 'field_node_domain_id', 'Domain', 3, 'domain');
  zimbra_add_integer_field($type, 'field_mailbox_size', 'Mailbox size', 4);
}


/**
 * Add the text field
 *
 * @param $type
 *   A node type object.
 *
 * @ingroup issue
 */
function zimbra_add_text_field($type, $field_name, $field_label ='', $weight =0) {
  $field = field_info_field($field_name);
  $instance = field_info_instance('node', $field_name, $type->type);
  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'text',
      'entity_types' => array('node'),
    );
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'node',
      'bundle' => $type->type,
      'label' => t($field_label),
      'widget' => array('type' => 'text_textfield', 'weight' => $weight),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'text_default',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'text_default',
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Add the text field
 *
 * @param $type
 *   A node type object.
 *
 * @ingroup issue
 */
function zimbra_add_text_long_field($type, $field_name, $field_label ='', $weight =0) {
  $field = field_info_field($field_name);
  $instance = field_info_instance('node', $field_name, $type->type);
  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'text_long',
      'entity_types' => array('node'),
    );
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'node',
      'bundle' => $type->type,
      'label' => t($field_label),
      'widget' => array('type' => 'text_textarea', 'weight' => $weight),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'text_default',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'text_default',
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Add the Integer field
 *
 * @param $type
 *   A node type object.
 *
 * @ingroup issue
 */
function zimbra_add_integer_field($type, $field_name, $field_label ='', $weight =0) {
  $field = field_info_field($field_name);
  $instance = field_info_instance('node', $field_name, $type->type);
  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'number_integer',
      'entity_types' => array('node'),
    );
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'node',
      'bundle' => $type->type,
      'label' => t($field_label),
      'widget' => array('type' => 'number', 'weight' => $weight),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'number_integer',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'number_integer',
        ),
      ),
    );
    field_create_instance($instance);
  }
}



/**
 * Add the Node reference field
 *
 * @param $type
 *   A node type object.
 *
 * @ingroup issue
 */
function zimbra_add_node_reference_field($type, $field_name, $field_label ='', $weight =0, $reference ='article') {
  $field = field_info_field($field_name);
  $instance = field_info_instance('node', $field_name, $type->type);
  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'node_reference',
      'entity_types' => array(),
      'settings' => array(
      	'referenceable_types' => array($reference =>$reference),
      ),
    );
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'node',
      'bundle' => $type->type,
      'label' => t($field_label),
      'widget' => array('type' => 'options_select', 'weight' => $weight),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'node_reference_default',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'node_reference_default',
        ),
      ),
    );
    field_create_instance($instance);
  }
}

	
/**
 * Add the User reference field
 *
 * @param $type
 *   A node type object.
 *
 * @ingroup issue
 */
function zimbra_add_user_reference_field($type, $field_name, $field_label ='', $weight =0) {
  $field = field_info_field($field_name);
  $instance = field_info_instance('node', $field_name, $type->type);
  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'user_reference',
      'entity_types' => array(),
      'settings' => array(
      	'referenceable_roles' => array('2' =>2),
      ),
    );
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'node',
      'bundle' => $type->type,
      'label' => t($field_label),
      'widget' => array('type' => 'options_select', 'weight' => $weight),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'user_reference_default',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'user_reference_default',
        ),
      ),
    );
    field_create_instance($instance);
  }
}




