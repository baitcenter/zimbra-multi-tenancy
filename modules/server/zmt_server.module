<?php

/**
 * Implements hook_entity_info().
 */
function zmt_server_entity_info() {
  $entity = array(
    'zmt_server' => array(
      'label' => t('Zimbra server'),
      'entity class' => 'ZmtServerEntity',
      'controller class' => 'ZmtEntityController',
      'base table' => 'zmt_server',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'id',
        'label' => 'name',
      ),
      'entity cache' => TRUE,
      'bundles' => array(),
      'view modes' => array(
        'full' => array(
          'label' => t('Zimbra server'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'zmt_server_label',
      'uri callback' => 'zmt_server_uri',
      'module' => 'zmt_server',
      'access callback' => 'zmt_server_access',
    ),
  );

  return $entity;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function zmt_server_entity_property_info_alter(&$info) {
  // Add related tenant to the user object.
  $properties = &$info['zmt_server']['properties'];
  $properties['creator'] = array(
    'type' => 'user',
    'label' => t('Creator'),
    'description' => t('The server\'s creator.'),
    'getter callback' => 'zmt_server_get_properties',
    'schema field' => 'uid',
  );
}

/**
 * Entity metadata callback to load properties for the given server.
 */
function zmt_server_get_properties($server, array $options, $name) {
  switch ($name) {
    case 'creator':
      return user_load($server->uid);
  }
}

/**
 * Implements hook_permission().
 */ 
function zmt_server_permission() {
  return zmt_access_permissions('zmt_server', 'Zimbra Server');
}

/**
 * Access callback for Server.
 */
function zmt_server_access($op, $server, $account = NULL, $entity_type = NULL) {
  global $user;
  if (NULL === $account) {
    $account = $user;
  }
  if (user_access('administer zmt', $account) || user_access('administer any zmt_server', $account)) {
    return TRUE;
  }
  if ($op === 'list' || $op === 'create') {
    return user_access('administer own zmt_server', $account);
  }
  else {
    $is_own = isset($server->uid) && $server->uid == $account->uid;
    return user_access('administer own zmt_server', $account) && $is_own;
  }
}

/**
 * Zmt server entity uri callback.
 */
function zmt_server_uri($server) {
  return array(
    'path' => 'zmt/server/' . $server->id,
  );
}

/**
 * Zmt server entity label callback.
 */
function zmt_server_label($server, $entity_type) {
  return t('Zimbra server @name', array('@name' => $server->name));
}

/**
 * Loads a server by ID.
 *
 * @see zmt_server_load_multiple()
 */
function zmt_server_load($id, $reset = FALSE) {
  if (empty($id)) {
    return FALSE;
  }

  $servers = zmt_server_load_multiple(array($id), array(), $reset);
  return $servers ? reset($servers) : FALSE;
}

/**
 * Loads multiple server by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $ids
 *   An array of server IDs.
 * @param $conditions
 *   An array of conditions on the {zmt_server} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal server loading cache.
 *
 * @return
 *   An array of server objects indexed by id.
 */
function zmt_server_load_multiple($ids = array(), array $conditions = array(), $reset = FALSE) {
  if (empty($ids) && empty($conditions)) {
    return array();
  }

  return entity_load('zmt_server', $ids, $conditions, $reset);
}

/**
 * Loads all servers.
 *
 * @see zmt_server_load_multiple()
 */
function zmt_server_load_all($limit = 0, $offset = 0){
  $cache = &backdrop_static(__FUNCTION__, array());
  $cache_key = $limit . '-' . $offset;
  if (!isset($cache[$cache_key])) {
    $efq = new EntityFieldQuery();
    if ((int) $limit > 0) {
      $efq->range($offset, $limit);
    }
    $result = $efq->entityCondition('entity_type', 'zmt_server')->execute();
    $ids = isset($result['zmt_server']) ? array_keys($result['zmt_server']) : array();
    $cache[$cache_key] = zmt_server_load_multiple($ids);
  }
  return $cache[$cache_key];
}

/**
 * Returns an initialized server object.
 *
 * @param $name
 *   The machine-readable name of the server.
 *
 * @return
 *   A server object with all default fields initialized.
 */
function zmt_server_new($name = '') {
  global $user;
  $values = array(
    'name' => $name,
    'service_location' => '',
    'admin_user' => '',
    'admin_password' => '',
    'exclude_mailbox' => '',
    'delete_domain' => 0,
    'delete_dl' => 0,
    'delete_account' => 0,
    'delete_alias' => 0,
    'auth_token' => '',
    'uid' => $user->uid,
    'created' => REQUEST_TIME,
    'changed' => REQUEST_TIME,
  );
  return entity_get_controller('zmt_server')->create($values);
}

/**
 * Saves a server.
 *
 * @param $server
 *   The full server object to save.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function zmt_server_save($server, $by_entity = TRUE) {
  $server->changed = REQUEST_TIME;
  if ($by_entity === TRUE) {
    return entity_get_controller('zmt_server')->save($server);
  }
  else {
    $fields = array(
      'name' => $server->name,
      'service_location' => $server->service_location,
      'admin_user' => $server->admin_user,
      'admin_password' => $server->admin_password,
      'exclude_mailbox' => $server->exclude_mailbox,
      'delete_domain' => $server->delete_domain,
      'delete_dl' => $server->delete_dl,
      'delete_account' => $server->delete_account,
      'delete_alias' => $server->delete_alias,
      'auth_token' => $server->auth_token,
      'uid' => $server->uid,
      'created' => $server->created,
      'changed' => $server->changed,
    );
    if (!isset($server->id) || (int) $server->id == 0) {
      $server->id = db_insert('zmt_server')->fields($fields)->execute();
      return SAVED_NEW;
    }
    else {
      db_update('zmt_server')
        ->fields($fields)
        ->condition('id', $server->id)
        ->execute();
      entity_get_controller('zmt_server')->resetCache(array($server->id));
      return SAVED_UPDATED;
    }
  }
}

/**
 * Deletes a server by ID.
 *
 * @param $id
 *   The ID of the server to delete.
 */
function zmt_server_delete($id) {
  zmt_server_delete_multiple(array($id));
}

/**
 * Deletes multiple servers by ID.
 *
 * @param $ids
 *   An array of server IDs to delete.
 */
function zmt_server_delete_multiple(array $ids = array()) {
  entity_get_controller('zmt_server')->delete($ids);
}

/**
 * Defines exclude mailbox patterns.
 */
function zmt_server_exclude_mailbox() {
  return array(
    'postmaster*',
    'root*',
    'admin*',
    'wiki*',
    'spam\.*',
    'ham\.*',
    'virus-quarantine\.*',
    'galsync\.*',
  );
}

/**
 * Implements hook_autoload_info().
 */
function zmt_server_autoload_info() {
  return array(
    'ZmtServerEntity' => 'zmt_server.entity.inc',
  );
}
